{namespace sm.gButton.TemplateStendhal}

/**
 * typedef {{
 *     content: ({
 *         default: ?string,
 *         sizeS: ?string,
 *         sizeL: ?string
 *     }|string|undefined),
 *     icon: ({
 *         name: string,
 *         type: ('png'|'svg'),
 *         position: ('left'|'right')
 *     }|undefined),
 *     defaultText: ?string
 * }}
 * sm.gButton.TemplateStendhal.Params.Data
 */


/**
 * typedef {{
 *     theme: ('dark'|'thin'|undefined),
 *     isDisabled: (boolean|undefined),
 *     size: ('s'|'m'|'xl'|undefined),
 *     disableHover: (boolean|undefined),
 *     borderRoundSize: ('xl'|undefined)
 * }}
 * sm.gButton.TemplateStendhal.Params.Config
 */


/**
 * @param params {{
 *     data: sm.gButton.TemplateStendhal.Params.Data,
 *     config: sm.gButton.TemplateStendhal.Params.Config
 * }}
 * @constructor
 * @extends cl.gButton.Template
 * @factory sm.iCloblFactory.FactoryStendhal
 */
{template .button}
    {call .init data="all" /}
{/template}

/**
 * @override
 */
{template .NAME}
    button
{/template}


/**
 * Body
 * @param? params {{
 *     data: {
 *         content: ({
 *             default: ?string,
 *             sizeS: ?string,
 *             sizeL: ?string
 *         }|undefined),
 *         icon: ({
 *             name: string,
 *             type: ('png'|'svg'),
 *             position: ('left'|'right')
 *         }|undefined)
 *     }
 * }}
 * @override
 */
{template .body}
    {if $params.data.icon}
        {call .content_ data="all" /}
    {else}
        {call .text_ data="all" /}
    {/if}
{/template}


/**
 * @param? params {{
 *     data: {
 *         content: ({
 *             default: ?string,
 *             sizeS: ?string,
 *             sizeL: ?string
 *         }|undefined),
 *         icon: {
 *             name: string,
 *             type: ('png'|'svg'),
 *             position: ('left'|'right')
 *         }
 *     }
 * }}
 */
{template .content_}
    <div class="{call .rootClass /}__content">
        {if $params.data.icon.position == 'left'}
            {call .icon_ data="all" /}
            {call .text_ data="all" /}
        {else}
            {call .text_ data="all" /}
            {call .icon_ data="all" /}
        {/if}
    </div>
{/template}


/**
 * @param? params {{
 *     data: {
 *         icon: {
 *             name: string,
 *             type: ('png'|'svg'),
 *             position: ('left'|'right')
 *         }
 *     }
 * }}
 */
{template .icon_}
    {let $type: $params.data.icon.type == 'png' ? 'icon' : 'icon-svg' /}

    <div class="{call .rootClass /}__content-icon">
        {call .renderChild}
            {param params: [
                'type': $type,
                'renderParams': [
                    'data': [
                        'type': $params.data.icon.name
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * @param? params {{
 *     data: {
 *         content: ({
 *             default: ?string,
 *             sizeS: ?string,
 *             sizeL: ?string
 *         }|string|undefined),
 *         defaultText: (string|undefined)
 *     }
 * }}
 */
{template .text_}
    <div class="{call .rootClass /}__content-text">
        {let $isString kind="text"}
            {call sm.iSmUtils.smUtils.isString
                data="$params.data.content" /}
        {/let}

        {if $isString == 'true'}
            {$params.data.content ?: $params.data.defaultText}
        {else}
            {$params.data.content.default}
        {/if}
    </div>

    {if $params.data.content.sizeS}
        <div class="{call .rootClass /}__content-text
            {sp}{call .rootClass /}__content-text_size_s"
        >
            {$params.data.content.sizeS}
        </div>
    {/if}

    {if $params.data.content.sizeL}
        <div class="{call .rootClass /}__content-text
            {sp}{call .rootClass /}__content-text_size_l"
        >
            {$params.data.content.sizeL}
        </div>
    {/if}
{/template}


/**
 * @param params {
 *     data: {
 *         content: ({
 *             default: ?string,
 *             sizeS: ?string,
 *             sizeL: ?string
 *         }|undefined)
 *     },
 *     config: {
 *         size: ('s'|'m'|'xl'|undefined),
 *         isDisabled: (boolean|undefined),
 *         disableHover: (boolean|undefined),
 *         borderRoundSize: ('xl'|undefined)
 *     }
 * }
 * @override
 */
{template .additionalClasses}
    {if $params?.config?.isDisabled}
        {call .rootClass /}_disabled
    {/if}

    {if $params?.config?.size}
        {sp}{call .rootClass /}_size_{$params.config.size}
    {/if}

    {if not $params?.config?.disableHover}
        {sp}{call .rootClass /}_hoverable
    {/if}

    {if $params?.config?.borderRoundSize}
        {sp}{call .rootClass /}_border-round-size_{$params?.config?.borderRoundSize}
    {/if}

    {if $params.data.content.sizeS}
        {sp}{call .rootClass /}_viewport-size_s
    {/if}

    {if $params.data.content.sizeL}
        {sp}{call .rootClass /}_viewport-size_l
    {/if}
{/template}


/**
 * Attributes template
 * @param params {{
 *     data: {
 *         defaultText: string
 *     }
 * }}
 * @override
 */
{template .attributes kind="attributes"}
    data-params="{call cl.iUtils.Utils.stringify}
        {param json: quoteKeysIfJs([
            'defaultText': $params?.data.defaultText,
        ]) /}
    {/call}"
{/template}

