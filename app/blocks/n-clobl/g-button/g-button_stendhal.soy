{namespace sm.gButton.TemplateStendhal}

/**
 * typedef {{
 *     content: ?string,
 *     icon: ({
 *         name: string,
 *         type: ('png'|'svg'),
 *         position: ('left'|'right')
 *     }|undefined)
 * }}
 * sm.gButton.TemplateStendhal.Params.Data
 */


/**
 * typedef {{
 *     theme: ('dark'|'thin'|undefined),
 *     isDisabled: (boolean|undefined),
 *     size: ('s'|'m'|'xl'|undefined),
 *     disableHover: (boolean|undefined),
 *     borderRoundSize: ('xl'|undefined)
 * }}
 * sm.gButton.TemplateStendhal.Params.Config
 */


/**
 * @param params {{
 *     data: sm.gButton.TemplateStendhal.Params.Data,
 *     config: sm.gButton.TemplateStendhal.Params.Config
 * }}
 * @constructor
 * @extends cl.gButton.Template
 * @factory sm.iCloblFactory.FactoryStendhal
 */
{template .button}
    {call .init data="all" /}
{/template}

/**
 * @override
 */
{template .NAME}
    button
{/template}


/**
 * Body
 * @param? params {{
 *     data: {
 *         content: ?string,
 *         icon: ({
 *             name: string,
 *             type: ('png'|'svg'),
 *             position: ('left'|'right')
 *         }|undefined)
 *     }
 * }}
 * @override
 */
{template .body}
    {if $params.data.icon}
        {call .content_ data="all" /}
    {else}
        {$params.data.content}
    {/if}
{/template}


/**
 * @param? params {{
 *     data: {
 *         content: ?string,
 *         icon: {
 *             name: string,
 *             type: ('png'|'svg'),
 *             position: ('left'|'right')
 *         }
 *     }
 * }}
 */
{template .content_}
    <div class="{call .rootClass /}__content">
        {if $params.data.icon.position == 'left'}
            {call .icon_ data="all" /}
            {call .text_ data="all" /}
        {else}
            {call .text_ data="all" /}
            {call .icon_ data="all" /}
        {/if}
    </div>
{/template}


/**
 * @param? params {{
 *     data: {
 *         icon: {
 *             name: string,
 *             type: ('png'|'svg'),
 *             position: ('left'|'right')
 *         }
 *     }
 * }}
 */
{template .icon_}
    {let $type: $params.data.icon.type == 'png' ? 'icon' : 'icon-svg' /}

    <div class="{call .rootClass /}__content-icon">
        {call .renderChild}
            {param params: [
                'type': $type,
                'renderParams': [
                    'data': [
                        'type': $params.data.icon.name
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * @param? params {{
 *     data: {
 *         content: (string|undefined)
 *     }
 * }}
 */
{template .text_}
    <div class="{call .rootClass /}__content-text">
        {$params.data.content}
    </div>
{/template}


/**
 * @param params {
 *     config: {
 *         size: ('s'|'m'|'xl'|undefined),
 *         isDisabled: (boolean|undefined),
 *         disableHover: (boolean|undefined),
 *         borderRoundSize: ('xl'|undefined)
 *     }
 * }
 * @override
 */
{template .additionalClasses}
    {if $params?.config?.isDisabled}
        {call .rootClass /}_disabled
    {/if}

    {if $params?.config?.size}
        {sp}{call .rootClass /}_size_{$params.config.size}
    {/if}

    {if not $params?.config?.disableHover}
        {sp}{call .rootClass /}_hoverable
    {/if}

    {if $params?.config?.borderRoundSize}
        {sp}{call .rootClass /}_border-round-size_{$params?.config?.borderRoundSize}
    {/if}
{/template}
