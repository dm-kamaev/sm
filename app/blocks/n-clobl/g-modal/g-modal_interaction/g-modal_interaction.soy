{namespace sm.gModal.TemplateInteraction}


/**
 * @typedef {{
 *     id: (number|undefined),
 *     header: ({
 *         text: ?string
 *     }|undefined),
 *     content: (
 *         sm.bSmInteractionForm.Template.Params.Data|
 *         sm.bSmInteractionForm.TemplateComment.Params.Data
 *     ),
 *     contentName: ('smInteractionForm'|'smInteractionFormComment'),
 *     api: string,
 *     button: {
 *         data: sm.gButton.TemplateStendhal.Params.Data,
 *         config: sm.gButton.TemplateStendhal.Params.Config
 *     },
 *     errors: (Array<string>|undefined),
 *     closer: ({
 *         iconName: ?string,
 *         iconType: ?string
 *     }|undefined)
 * }} sm.gModal.TemplateInteraction.Params.Data
 */


/**
 * @typedef {{
 *     stylizationModifier: string,
 *     size: (string|undefined)
 * }} sm.gModal.TemplateInteraction.Params.Config
 */


/**
 * Modal template
 * @param params {{
 *     data: sm.gModal.TemplateInteraction.Params.Data,
 *     config: sm.gModal.TemplateInteraction.Params.Config
 * }}
 * @extends sm.gModal.TemplateStendhal
 * @factory sm.iCloblFactory.FactoryStendhal
 * @constructor
 * @doc
 */
{template .modal}
    {let $config: augmentMap(
        [
            'theme': 'default'
        ],
        $params.config
    ) /}

    {call .init}
        {param params: [
            'data': $params.data,
            'config': $config
        ] /}
    {/call}
{/template}


/**
 * @override
 */
{template .NAME}
    modal-interaction
{/template}


/**
 * Content
 * @param params {{
 *     data: sm.gModal.TemplateInteraction.Params.Data,
 *     config: sm.gModal.TemplateInteraction.Params.Config
 * }}
 * @override
 */
{template .content}
    {call .sectionHeader_ data="all" /}
    {call .sectionContent_ data="all" /}
    {call .sectionButton_ data="all" /}
    {call .sectionErrors_ data="all" /}
{/template}

/**
 * Css classes
 * @param params {
 *     config: {
 *         size: ?string
 *     }
 * }
 * @override
 */
{template .additionalClasses}
    {call .rootClass/}_interaction{sp}
    {call .super_additionalClasses data="all"/}
{/template}


/**
 * Attributes
 * @param params {{
 *     data: {
 *         id: (number|undefined),
 *         api: string,
 *         contentName: ('smInteractionForm'|'smInteractionFormComment')
 *     }
 * }}
 * @override
 */
{template .attributes kind="attributes"}
    data-params="
        {call cl.iUtils.Utils.stringify}
            {param json: [
                'id': $params.data.id ?: '',
                'api': $params.data.api,
                'contentName': $params.data.contentName,
            ]/}
        {/call}"
{/template}


/**
 * Section header
 * @param params {{
 *     data: {
 *         header: ({
 *             text: ?string
 *         }|undefined)
 *     },
 *     config: {
 *         stylizationModifier: string,
 *         size: (string|undefined)
 *     }
 * }}
 */
{template .sectionHeader_}
    <div class="{call .rootClass/}__section {call .rootClass/}__section_header">
        {call .header_ data="all" /}
        {call .closer data="all" /}
    </div>
{/template}


/**
 * Section content
 * @param params {{
 *     data: {
 *         content: (
 *             sm.bSmInteractionForm.Template.Params.Data|
 *             sm.bSmInteractionForm.TemplateComment.Params.Data
 *         ),
 *         contentName: ('smInteractionForm'|'smInteractionFormComment')
 *     }
 * }}
 * @private
 */
{template .sectionContent_}
    <div class="{call .rootClass/}__section{sp}
        {call .rootClass/}__section_content">

        {call .renderChild}
            {param params: [
                'type': $params.data.contentName,
                'renderParams': [
                    'data': $params.data.content
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Section button
 * @param params {{
 *     data: {
 *         button: {
 *             data: sm.gButton.TemplateStendhal.Params.Data,
 *             config: sm.gButton.TemplateStendhal.Params.Config
 *         }
 *     }
 * }}
 */
{template .sectionButton_}
    <div class="{call .rootClass/}__section {call .rootClass/}__section_button">
        <div class="{call .rootClass/}__button">
            {call .renderChild}
                {param params: [
                    'type': 'button',
                    'renderParams': [
                        'data': $params.data.button.data,
                        'config': $params.data.button.config
                    ]
                ]/}
            {/call}
        </div>
    </div>
{/template}


/**
 * Section for error message
 * @param params {{
 *     data: {
 *         errors: (Array<string>|undefined)
 *     }
 * }}
 */
{template .sectionErrors_}
    <div class="{call .rootClass/}__section {call .rootClass/}__section_errors">
        {if $params.data.errors and length($params.data.errors)}
            {call .listErrors data="all" /}
        {/if}
    </div>
{/template}


/**
 * List error messages
 * @param params {{
 *     data: {
 *         errors: Array<string>
 *     }
 * }}
 * @public
 */
{template .listErrors}
    {for $i in range(length($params.data.errors))}
        <div class="{call .rootClass/}__error">
            {$params.data.errors[$i]}
        </div>
    {/for}
{/template}


/**
 * Header
 * @param params {{
 *     data: {
 *         header: ({
 *             text: ?string
 *         }|undefined)
 *     }
 * }}
 */
{template .header_}
    {if $params.data.header and $params.data.header.text}
        <div class="{call .rootClass/}__header">
            {$params.data.header.text}
        </div>
    {/if}
{/template}
