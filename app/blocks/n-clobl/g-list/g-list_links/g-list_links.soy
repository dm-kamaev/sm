{namespace sm.gList.TemplateLinks}


/**
 * @typedef {{
 *     items: Array<{
 *         label: ?string,
 *         val: (string|number|undefined),
 *         url: (string|undefined),
 *         isSelected: (boolean|undefined),
 *         isDisabled: (boolean|undefined)
 *     }>,
 *     itemConfig: sm.bSmLink.Template.Params.Config,
 *     selectedItemId: (number|undefined)
 * }} sm.gList.TemplateLinks.Params.Data
 */


/**
 * @typedef {{
 *     mode: ('selection'|'multiselection'|undefined),
 *     maxSelection: (number|undefined),
 *     size: ('m'|'l'|undefined)
 * }} sm.gList.TemplateLinks.Params.Config
 */


/**
 * Constructor
 * @param params {{
 *     data: sm.gList.TemplateLinks.Params.Data,
 *     config: sm.gList.TemplateLinks.Params.Config
 * }}
 * @extends sm.gList.TemplateStendhal
 * @constructor
 * @factory sm.iCloblFactory.FactoryStendhal
 * @doc
 */
{template .list}
    {call .init data="all"/}
{/template}

/**
 * @override
 */
{template .NAME}
    list-links
{/template}



/**
 * Body
 * @param params {{
 *     data: sm.gList.TemplateLinks.Params.Data,
 *     config: sm.gList.TemplateLinks.Params.Config
 * }}
 * @override
 */
{template .body}
    {let $selectedItemId: $params?.data?.selectedItemId /}

    {if $params?.data?.items}
        {for $i in range($params.data.items.length)}
            {let $item: $params.data.items[$i]/}

            {call .listItem}
                {param params: [
                    'label': $item.label,
                    'url': $item.url,
                    'isSelected': ($i == $selectedItemId) or
                        ($item?.isSelected),
                    'isDisabled': $item?.isDisabled,
                    'itemData': $item,
                    'itemConfig': $params.data.itemConfig,
                    'size': $params.config.size
                ]/}
            {/call}
        {/for}
    {/if}
{/template}


/**
 * Value template
 * @param params {{
 *     label: ?string,
 *     url: (string|undefined),
 *     isDisabled: boolean
 *     isSelected: boolean,
 *     itemData: Object,
 *     itemConfig: sm.bSmLink.Template.Params.Config,
 *     size: ('m'|'l'|undefined)
 * }}
 * @override
 * @protected
 */
{template .value}
    {let $customClasses kind="html"}
        {call .rootClass/}__link
    {/let}

    {let $config: augmentMap(
        [
            'size': $params.size,
            'customClasses': [$customClasses],
            'disableHover': true
        ],
        $params.itemConfig
    ) /}

    <div class="{call .rootClass/}__item-link">
        {call .renderChild}
            {param params: [
                'type': 'smLink',
                'renderParams': [
                    'data': [
                        'content': $params.label
                    ],
                    'config': $config
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Css classes
* @param params {{
 *     config: {
 *         size: ('m'|'l'|undefined)
 *     }
 * }}
 * @override
 * @protected
 */
{template .additionalClasses}
    {call .rootClass/}_links

    {if $params.config.size}
        {sp}{call .rootClass/}_size_{$params.config.size}
    {/if}
{/template}
