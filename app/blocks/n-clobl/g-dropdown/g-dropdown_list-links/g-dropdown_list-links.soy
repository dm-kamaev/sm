{namespace sm.gDropdown.TemplateListLinks}


/**
 * @typedef {{
 *     opener: (string|undefined),
 *     defaultOpenerText: (string|undefined),
 *     content: sm.gList.TemplateLinks.Params.Data
 * }} sm.gDropdown.TemplateListLinks.Params.Data
 */


 /**
 * @typedef {{
 *     stylizationModifier: string,
 *     customClasses: (Array<string>|undefined),
 *     openerSize: ('m'|'xl'|undefined),
 *     openerTheme: (string|undefined),
 *     iconName: (string|undefined),
 *     iconType: ('icon-svg'|undefined)
 *     contentSize: ('m'|'l'|undefined),
 *     theme: ('dense'|'wide'|undefined)
 * }} sm.gDropdown.TemplateListLinks.Params.Config
 */


/**
 * Dropdown template
 * @param params {{
 *     data: sm.gDropdown.TemplateListLinks.Params.Data,
 *     config: sm.gDropdown.TemplateListLinks.Params.Config
 * }}
 * @extends sm.gDropdown.TemplateSelect
 * @constructor
 * @factory sm.iCloblFactory.FactoryStendhal
 * @doc
 */
{template .dropdown}
    {call .init data="all" /}
{/template}

/**
 * @override
 */
{template .NAME}
    dropdown-list-links
{/template}


/**
 * Control for displaying content
 * @param params {{
 *     data: {
 *         opener: (string|undefined),
 *         defaultOpenerText: (string|undefined)
 *     },
 *     config: {
 *         openerSize: ('m'|'xl'|undefined),
 *         openerTheme: (string|undefined)
 *     }
 * }}
 * @override
 */
{template .opener}
    {let $customClasses kind="html"}
        {call .rootClass/}__opener-link
    {/let}

    {let $openerContent kind="html"}
        {call .openerContent data="all" /}
    {/let}

    {call .renderChild}
        {param params: [
            'type': 'smLink',
            'renderParams': [
                'data': [
                    'content': $openerContent
                ],
                'config': [
                    'size': $params.config.openerSize,
                    'customClasses': [$customClasses],
                    'theme': $params.config.openerTheme ?: 'dark'
                ]
            ]
        ]/}
    {/call}
{/template}


/**
 * Default icon name
 * @param params {{
 *     data: {
 *         default: {
 *             iconName: ?string
 *         }
 *     }
 * }}
 * @override
 * @protected
 */
{template .getDefaultIconName}
    {$params.data?.default?.iconName ?: 'small-opener-arrow'}
{/template}


/**
 * Content
 * @param params {{
 *     data: {
 *        content: sm.gList.TemplateLinks.Params.Data
 *     },
 *     config: {
 *         contentSize: ('m'|'l'|undefined)
 *     }
 * }}
 * @override
 */
{template .content}
    {call .renderChild}
        {param params: [
            'type': 'list-links',
            'renderParams': [
                'data': $params.data.content,
                'config': [
                    'size': $params.config.contentSize
                ]
            ]
        ]/}
    {/call}
{/template}


/**
 * Css classes
 * @override
 */
{template .additionalClasses}
    {call .rootClass/}_select{sp}
    {call .rootClass/}_list-links
{/template}

