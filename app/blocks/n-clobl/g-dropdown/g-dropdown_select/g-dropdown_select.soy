{namespace sm.gDropdown.DropdownSelectTemplate}

/**
 * Select template
 * @param? params {{
 *     data: {
 *        defaultOpenerText: string, - default selected item name or placeholder
 *        staticText: string, - text in opener, which not changes
 *        listItems: list<[
 *            label: ?<string>,
 *            text: ?<string> - optional field
 *        ]>,
 *        selectedItemId: number
 *     }
 *     config: {
 *        usePlaceholder: boolean,
 *        viewType: ?string,
 *        iconSprite: ?string,
 *        theme: ?string,
 *        textSize: ?string,
 *        indent: ?string
 *     }
 * }}
 * @extends cl.gDropdown.Template
 * @constructor
 * @doc
 */
{template .dropdown}
    {call .init data="all" /}
{/template}

/**
 * Control
 * @param? params {{
 *     data: {
 *         defaultOpenerText: string,
 *         staticText: string,
 *         listItems: list<[
 *             label: ?<string>,
 *             text: ?<string> - optional field
 *         ]>,
 *         selectedItemId: number
 *     }
 *     config: {
 *         usePlaceholder: boolean,
 *         viewType: ?string,
 *         iconSprite: ?string,
 *         textSize: ?string,
 *         indent: ?string
 *         stylizationModifier: ?string
 *     }
 * }}
 * @override
 */
{template .opener  kind="html"}
    {let $data: [
        'defaultOpenerText': $params?.data?.defaultOpenerText,
        'usePlaceholder': $params?.config?.usePlaceholder
    ] /}

    <div class="{call .rootClass/}__opener-text">
        {if $params?.data?.staticText}
            {$params?.data?.staticText}{sp}
        {/if}
        <span class="{call .rootClass/}__opener-custom-text
                     {if $params?.config?.usePlaceholder}
                        {sp}{call .rootClass/}__opener-text_placeholder
                     {/if}"
              data-params="{call goog.json.serialize data="$data" /}">
            {if $params?.data?.defaultOpenerText and
                not $params?.data?.selectedItemId}
                {$params?.data?.defaultOpenerText}
            {/if}
            {if $params?.data?.selectedItemId}
                {$params?.data?.listItems[$params?.data?.selectedItemId].label}
            {/if}
        </span>
    </div>
    {if $params?.config?.iconSprite}
        <div class="{call .rootClass/}__opener-arrow">
            {call cl.iFactory.FactoryManager.INSTANCE.renderTemplate}
                {param params: [
                    'factory': $params.config.stylizationModifier,
                    'type': 'icon',
                    'renderParams': [
                        'data': [
                            'type': $params?.config?.iconSprite
                        ]
                    ]
                ]/}
            {/call}
        </div>
    {/if}
{/template}

/**
 * List template
 * @param? params {{
 *     data: {
 *         listItems: list<string>,
 *         selectedItemId: number
 *     }
 *     config: {
 *         viewType: ?string,
 *         theme: ?string,
 *         color: ?string,
 *         textSize: ?string,
 *         indent: ?string
 *     }
 * }}
 */
{template .content kind="html"}
    {call cl.iFactory.FactoryManager.INSTANCE.renderTemplate}
        {param params: [
            'factory': $params.config.stylizationModifier,
            'type': 'list-select',
            'renderParams': [
                'data': [
                    'items': $params.data.listItems,
                    'selectedItemId': $params.data.selectedItemId
                ],
                'config': [
                    'viewType': $params?.config?.viewType,
                    'theme': $params?.config?.theme,
                    'color': $params?.config?.color,
                    'textSize': $params?.config?.textSize,
                    'indent': $params?.config?.indent
                ]
            ]
        ]/}
    {/call}
{/template}

/**
 * Css classes
 * @param params ?{}
 * @override
 */
{template .additionalClasses}
    {call .rootClass/}_select

    {if $params?.config?.color}
        {sp}{call .rootClass/}_{$params.config.color}-color
    {/if}
    {if $params?.config?.textSize}
        {sp}{call .rootClass/}_text-{$params.config.textSize}
    {/if}
    {if $params?.config?.iconOffset}
        {sp}{call .rootClass/}_{$params.config.iconOffset}-icon-offset
    {/if}
    {if $params?.config?.indent}
        {sp}{call .rootClass/}_indent-{$params?.config?.indent}
    {/if}
{/template}
