{namespace sm.gDropdown.TemplateStendhal}

/**
 * Dropdown template
 * @param params {sm.gDropdownStendhal.Params}
 * @extends cl.gDropdown.Template
 * @factory cl.iCloblFactory.CloblFactory
 * @constructor
 * @doc
 */
{template .dropdown}
    {call .init data="all" /}
{/template}


/**
 * @override
 */
{template .NAME}
    dropdown
{/template}


/**
 * Opener template
 * @override
 * @protected
 */
{template .opener}
    {call .openerContent data="all" /}
{/template}


/**
 * Content of opener
 * @protected
 */
{template .openerContent}
    <div class="{call .rootClass/}__opener-content">
        {call .openerTextIcon_ data="all" /}
        {call .openerText data="all" /}
        {call .openerArrowIcon_ data="all" /}
    </div>
{/template}


/**
 * Text of opener
 * @param params {{
 *     data: {
 *         opener: string
 *     }
 * }}
 * @protected
 */
{template .openerText}
    <div class="{call .rootClass/}__opener-text">
        {$params.data.opener}
    </div>
{/template}


/**
 * Opener text icon
 * @param params {{
 *     config: {
 *         openerTextIcon: ?sm.gDropdownStendhal.Types.Icon
 *        }
 *     }
 * }}
 * @private
 */
{template .openerTextIcon_}
    {if $params.config?.openerTextIcon}
        <div class="{call .rootClass/}__opener-text-icon">
            {call .icon}
                {param params: [
                    'data': $params.config?.openerTextIcon
                ]/}
            {/call}
        </div>
    {/if}
{/template}


/**
 * Opener arrow icon
 * Two icons - arrow up and arrow down
 * @param params {{
 *     config: {
 *        openerArrowIcon: ?{
 *            up: ?sm.gDropdownStendhal.Types.Icon,
 *            down: ?sm.gDropdownStendhal.Types.Icon
 *        }
 *     }
 * }}
 * @private
 */
{template .openerArrowIcon_}
    <div class="{call .rootClass/}__opener-arrow-icon{sp}
                {call .rootClass/}__opener-arrow-icon_up{sp}
                {cl.iUtils.Utils.CssClass.HIDDEN}">
        {call .icon}
            {param params: [
                'data': $params.config?.openerArrowIcon?.up ?:
                        $params.config?.openerArrowIcon?.down
            ]/}
        {/call}
    </div>

    <div class="{call .rootClass/}__opener-arrow-icon{sp}
                {call .rootClass/}__opener-arrow-icon_down">
        {call .icon}
            {param params: [
                'data': $params.config?.openerArrowIcon?.down
            ]/}
        {/call}
    </div>
{/template}


/**
 * Icon
 * @param params {{
 *     data: {
 *         default: {
 *             iconName: ?string,
 *             iconType: ?string,
 *         },
 *         hover: ?{
 *             iconName: ?string,
 *             iconType: ?string,
 *         }
 *     }
 * }}
 * @protected
 */
{template .icon}
    {let $defaultType kind="text"}
        {call .getDefaultIconType data="all" /}
    {/let}
    {let $defaultName kind="text"}
        {call .getDefaultIconName data="all" /}
    {/let}

    <div class="{call .rootClass/}__icon-wrap">

        <div class="{call .rootClass/}__icon {call .rootClass/}__icon_default">
            {call .iconRenderer}
                {param type: $defaultType /}
                {param name: $defaultName /}
            {/call}
        </div>

        <div class="{call .rootClass/}__icon {call .rootClass/}__icon_hover">
            {call .iconRenderer}
                {param type: $params.data?.hover?.iconType ?: $defaultType /}
                {param name: $params.data?.hover?.iconName ?: $defaultName /}
            {/call}
        </div>

    </div>
{/template}


/**
 * Icon renderer
 * @param type {string}
 * @param name {string}
 * @protected
 */
{template .iconRenderer}
    {call .renderChild}
        {param params: [
            'type': $type,
            'renderParams': [
                'data': [
                    'type': $name
                ]
            ]
        ]/}
    {/call}
{/template}


/**
 * Default icon name
 * @param params {{
 *     data: {
 *         default: {
 *             iconName: ?string
 *         }
 *     }
 * }}
 * @protected
 */
{template .getDefaultIconName}
    {$params.data?.default?.iconName ?: 'opener-arrow'}
{/template}


/**
 * Default icon type
 * @param params {{
 *     data: {
 *         default: {
 *             iconType: ?string
 *         }
 *     }
 * }}
 * @protected
 */
{template .getDefaultIconType}
    {$params.data?.default?.iconType ?: 'icon'}
{/template}

/**
 * List template
 * @param params {{
 *     data: {
 *        content: ?string
 *     }
 * }}
 */
{template .content}
    {$params.data?.content}
{/template}

