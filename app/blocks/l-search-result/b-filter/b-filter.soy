{namespace sm.lSearchResult.bFilter.Template}

/**
 * @typedef {object} sm.lSearchResult.bFilter.Template.Params
 * @property {?object} data
 * @property {?{label: ?string, value: ?string}[]} data.filters
 * @property {?{title: ?string, help: ?string}} data.header
 * @property {?string} data.name
 * @property {?object} config
 * @property {?boolean} config.cannotBeHidden
 * @property {?boolean} config.isShowed
 * @property {?number} config.filtersToShow
 */


/**
 * Filter template
 * @param? params {sm.lSearchResult.bFilter.Template.Params}
 */
{template .base autoescape="strict" kind="html"}
    {call .init data="all"/}
{/template}


/**
 * Filter init template
 */
{template .init autoescape="strict" kind="html"}
    <div class="{call .rootClass/} {call .additionalClasses/}">
        {call .header data="all"/}
        {call .filters data="all"/}
    </div>
{/template}


/**
 * Header template
 * @param? params {
 *     data: ?{
 *         header: ?{
 *             title: ?string,
 *             tooltip: ?string
 *         }
 *     },
 *     config: ?{
 *         cannotBeHidden: ?bool
 *     }
 * }
 */
{template .header autoescape="strict" kind="html"}
    <div class="{call .rootClass/}__header">
        {call .title data="all" /}

        {if $params?.data?.header?.tooltip}
            {call .tooltip data="all" /}
        {/if}

        {if not $params?.config?.cannotBeHidden}
            {call .showFiltersButton data="all" /}
        {/if}
    </div>
{/template}


/**
 * filters template
 * @param? params {
 *     data: ?{
 *         filters: ?list<{
 *             label: ?string,
 *             value: ?string
 *         }>,
 *         name: ?string
 *     },
 *     config: ?{
 *         filtersToShow: ?number
 *     }
 * }
 */
{template .filters autoescape="strict" kind="html"}
    {let $classes kind="html"}
        {call .rootClass/}__filters

        {if not $params?.config?.cannotBeHidden}
            {if not $params?.config?.isShowed}
                {sp}i-utils__hidden
            {/if}
        {/if}
    {/let}

    <div class="{$classes}">
        {call .listFilters_ data="all" /}
        {call .button_ data="all"/}
    </div>
{/template}


/**
 * Filter template
 * @param? params {
 *     filter: ?{
 *         label: ?string,
 *         value: ?string,
 *         isChecked: ?boolean
 *     },
 *     hidden: ?bool,
 *     hidable: ?bool,
 *     name: ?string,
 *     id: number
 * }
 */
{template .filter autoescape="strict" kind="html"}
    {let $classes kind="html"}
        {call .rootClass/}__section

        {if $params.hidden}
            {sp}i-utils__hidden
        {/if}

        {if $params.hidable or $params.hidden}
            {sp}{call .rootClass/}__section_hidable
        {/if}
    {/let}

    <div class="{$classes}">
        <div class="{call .rootClass/}__filter">
            <input type="checkbox"
                class="{call .rootClass/}__input"
                id="{$params.name}-{$params.id}"
                name="{$params.name}"
                value="{$params.filter.value}"
                {$params.filter?.isChecked ? 'checked' : ''}/>

            <label for="{$params.name}-{$params.id}"
                class="{call .rootClass/}__input-label">
                {$params.filter.label}
            </label>
        </div>
    </div>
{/template}


/**
 * Body template
 * @param? params {
 *     data: ?{
 *         filters: ?list<{
 *             label: ?string,
 *             value: ?string
 *         }>,
 *         name: ?string
 *     }
 * }
 */
{template .listFilters_ autoescape="strict" kind="html"}
    {let $isExpanded kind="html"}
        {call .isExpanded_ data="all" /}
    {/let}

    {let $filToShow kind="html"}
        {call .filToShow_ data="all" /}
    {/let}

    {for $i in range($params.data.filters.length)}
        {call .filter}
            {param params: [
                'filter': $params.data.filters[$i],
                'hidden': not $isExpanded and $i > $filToShow ? true : false,
                'hidable': $i > $filToShow ? true : false,
                'name': $params.data.name,
                'id': $i
            ]/}
        {/call}
    {/for}
{/template}


/**
 * Body template
 * @param? params {
 *     data: ?{
 *         name: string,
 *         filters: Array<Object>
 *     }
 * }
 */
{template .button_ autoescape="strict" kind="html"}
    {let $isExpanded kind="html"}
        {call .isExpanded_ data="all" /}
    {/let}

    {let $filToShow kind="html"}
        {call .filToShow_ data="all" /}
    {/let}

    {if $params.data.name == 'activity' or
        $params.data.name == 'additionalEducation'}
        {call .bottonShowModal_ /}
    {elseif $params.data.filters.length > $filToShow}
        {call .buttonShowMore_}
            {param params: [
                'numberHiddenItems': $params.data.filters.length - $filToShow - 1,
                'isExpanded': $isExpanded
            ]/}
        {/call}
    {/if}
{/template}


/**
 * Button template for the call modal
 */
{template .bottonShowModal_ private="true"}
    {let $customClasses kind="html"}
        {call .rootClass/}__button{sp}
        {call .rootClass/}__button_show-modal
    {/let}

    {call sm.bLink.Template.base}
        {param params: [
            'data': [
                'name': 'Полный список'
            ],
            'config': [
                'customClasses': $customClasses,
                'size': 'small'
            ]
        ]/}
    {/call}
{/template}


/**
 * Tempate button
 * @param? params {
 *     numberHiddenItems: ?number,
 *     isExpanded: ?boolean
 * }
 */
{template .buttonShowMore_ private="true"}
    {let $customClassesButtonShow kind="html"}
        {call .rootClass/}__button{sp}
        {call .rootClass/}__button_show

        {if $params.isExpanded}
            {sp}i-utils__hidden
        {/if}
    {/let}

    {let $customClassesButtonHide kind="html"}
        {call .rootClass/}__button{sp}
        {call .rootClass/}__button_hide

        {if not $params.isExpanded}
            {sp}i-utils__hidden
        {/if}
    {/let}

    {call sm.bLink.Template.base}
        {param params: [
            'data': [
                'name': 'Еще ' + $params.numberHiddenItems + ' предметов'
            ],
            'config': [
                'customClasses': $customClassesButtonShow,
                'size': 'small'
            ]
        ]/}
    {/call}

    {call sm.bLink.Template.base}
        {param params: [
            'data': [
                'name': 'Свернуть список'
            ],
            'config': [
                'customClasses': $customClassesButtonHide,
                'size': 'small'
            ]
        ]/}
    {/call}
{/template}


/**
 * Show list of filters collapsed or expanded
 * @param? params {
 *     filter: ?{
 *         isChecked: ?boolean
 *     }
 * }
 */
{template .isExpanded_ kind="html" private="true"}
    {for $i in range($params.data.filters.length)}
        {if $i > 5 and $params.data.filters[$i].isChecked}
            true
        {/if}
    {/for}
{/template}


/**
 * Determines how many filters show
 * @param? params {
 *     config: ?{
 *         filtersToShow: ?number
 *     }
 * }
 */
{template .filToShow_ kind="html" private="true"}
    {if $params?.config?.filtersToShow}
        {$params?.config?.filtersToShow - 1}
    {else}
        5
    {/if}
{/template}


/**
 * Show filters button
 * @param? params {
 *     config: ?{
 *         isShowed: ? boolean
 *     }
 * }
 */
{template .showFiltersButton}
    <div class="{call .rootClass/}__show-filters-button">
        <div class="{call .rootClass/}__show-filters-icon{sp}
            {$params?.config?.isShowed ?
                'g-icon_img_filter-arrow-up' :
                'g-icon_img_filter-arrow-down'
            }">
        </div>
    </div>
{/template}


/**
 * Title template
 * @param? params {
 *     data: ?{
 *         header: ?{
 *             title: ?string
 *         }
 *     }
 * }
 */
{template .title autoescape="strict" kind="html"}
    <span class="{call .rootClass/}__title">
        {$params?.data?.header?.title}
    </span>
{/template}


/**
 * Template tooltip
 * @param? params {
 *     data: ?{
 *         header: ?{
 *             tooltip: ?string
 *         }
 *     }
 * }
 */
{template .tooltip}
    <div class="{call .rootClass/}__tooltip i-hint">
        {let $customClasses kind="html"}
            {call .rootClass/}__hint
        {/let}

        {let $tooltipData kind="html"}
            <div class="{call .rootClass/}__hint-content">
                {$params?.data?.header?.tooltip}
            </div>
        {/let}

        {call .tooltipIcon /}

        {call sm.iFactory.TemplateFactoryStendhal.INSTANCE.render}
            {param params: [
                'type': 'hint',
                'renderParams': [
                    'data': $tooltipData,
                    'config': [
                        'align': 'arrow',
                        'customClasses': [$customClasses]
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Template tooltip icon
 */
{template .tooltipIcon}
    <div class="{call .rootClass/}__tooltip-icon">
        {call sm.iFactory.TemplateFactoryStendhal.INSTANCE.render}
            {param params: [
                'type': 'icon',
                'renderParams': [
                    'data': [
                        'type': 'school-button'
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Root class name template
 */
{template .rootClass}
    b-filter
{/template}


/**
 * @override
 */
{template .additionalClasses}
{/template}
