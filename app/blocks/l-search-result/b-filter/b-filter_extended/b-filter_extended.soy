{namespace sm.lSearchResult.bFilterExtended.Template}


/**
 * Constructor
 * @param params {sm.lSearchResult.bFilter.Template.Params}
 * @extends sm.lSearchResult.bFilter.Template
 * @constructor
 */
{template .base autoescape="strict" kind="html"}
    {call .init data="all"/}
{/template}


/**
 * filters template
 * @param? params {
 *     data: ?{
 *         filters: ?list<{
 *             label: ?string,
 *             value: ?string,
 *             isChecked: ?bool
 *         }>,
 *         name: ?string
 *     },
 *     config: ?{
 *         filtersToShow: ?number
 *     }
 * }
 */
{template .filters autoescape="strict" kind="html"}
    {let $classes kind="html"}
        {call .rootClass/}__filters

        {if not $params?.config?.cannotBeHidden}
            {if not $params?.config?.isShowed}
                {sp}i-utils__hidden
            {/if}
        {/if}
    {/let}

    <div class="{$classes}">
        {call .listFilters data="all" /}
        {call .button data="all" /}
    </div>
{/template}


/**
 * Filter template
 * @param? params {
 *     filter: ?{
 *         label: ?string,
 *         value: ?string,
 *         isChecked: ?boolean
 *     },
 *     hidden: ?bool,
 *     hidable: ?bool,
 *     name: ?string,
 *     id: number
 * }
 * @override
 */
{template .filter autoescape="strict" kind="html"}
    {let $classes kind="html"}
        {call .rootClass/}__section

        {if $params.hidden and not $params.filter?.isChecked}
            {sp}i-utils__hidden
        {/if}

        {if $params.hidable or $params.hidden and not $params.filter?.isChecked}
            {sp}{call .rootClass/}__section_hidable
        {/if}
    {/let}

    {let $dataParams kind="html"}
        {call cl.iUtils.Utils.stringify}
            {param json: [
                'value': $params.filter.value,
                'label': $params.filter.label,
                'name': $params.name
            ]/}
        {/call}
    {/let}

    <div class="{$classes}" data-params="{$dataParams}">
        <div class="{call .rootClass/}__filter">
            {call .input data="all" /}
            {call .label data="all" /}
        </div>
    </div>
{/template}


/**
 * Tempate button
 * @override
 */
{template .buttonMore kind="html"}
    {let $customClasses kind="html"}
        {call .rootClass/}__button{sp}
        {call .rootClass/}__button_show-modal
    {/let}

    {call sm.bLink.Template.base}
        {param params: [
            'data': [
                'name': 'Полный список'
            ],
            'config': [
                'customClasses': $customClasses,
                'size': 'small'
            ]
        ]/}
    {/call}
{/template}


/**
 * Determines how many filters show
 * @param? params {
 *     config: ?{
 *         filtersToShow: ?number
 *     }
 * }
 * @override
 */
{template .filToShow kind="html"}
    {if $params?.config?.filtersToShow}
        {$params?.config?.filtersToShow}
    {else}
        3
    {/if}
{/template}


/**
 * @override
 */
{template .additionalClasses}
    {call .rootClass/}_extended
{/template}
