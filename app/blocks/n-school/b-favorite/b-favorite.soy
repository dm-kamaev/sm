{namespace sm.bFavorite.Template}


/**
 * Favorite template parameters
 * @typedef {{
 *     schools: sm.bSchoolListPaged.Template.Params
 * }} sm.bFavorite.Template.Params.Data
 */


/**
 * Constructor
 * @param params {{
 *     data: sm.bFavorite.Template.Params.Data,
 *     config: {
 *         isUserAuthorized: boolean
 *     }
 * }}
 * @extends cl.iControl.Template
 * @constructor
 */
{template .favorite}
    {call .init data="all" /}
{/template}


/**
 * Body
 * @override
 */
{template .body}
    {call .icon_/}
    {call .tooltip_ data="all"/}
{/template}


/**
 * icons template
 */
{template .icon_ kind="html" private="true"}
    {let $customClasses kind="html"}
        {call .rootClass/}__icon
    {/let}

    <div class="{call .rootClass/}__icon-wrap">
        {call .renderChild}
            {param params: [
                'type': 'icon-svg',
                'renderParams': [
                    'data': [
                        'type': 'favorite'
                    ],
                    'config': [
                        'customClasses': [$customClasses]
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Tooltips template
 */
{template .tooltip_ kind="html" private="true"}
    {let $tooltipData kind="html"}
        {call .tooltipData_ data="all" /}
    {/let}

    {let $customClasses kind="html"}
        {call .rootClass/}__hint
    {/let}

    {call .renderChild}
        {param params: [
            'type': 'hint',
            'renderParams': [
                'data': $tooltipData,
                'config': [
                    'offset': 'm',
                    'topOffset': 'l',
                    'contentAlign': 'middle',
                    'customClasses': [$customClasses],
                    'noPadding': true,
                    'theme': 'straight-arrow'
                ]
            ]
        ]/}
    {/call}
{/template}


/**
 * tooltip Data
 */
{template .tooltipData_ kind="html" private="true"}
    <div class="{call .rootClass/}__hint-content
                {sp}{call .rootClass/}__hint-content_user-authorized">
        {call .contentUserAuthorized data="all"/}
    </div>
    <div class="{call .rootClass/}__hint-content
                {sp}{call .rootClass/}__hint-content_user-not-authorized">
        {call .contentUserNotAuthorized /}
    </div>
{/template}

/**
 * Tooltip content for state, when user is authorized
 */
{template .contentUserAuthorized}
    <div class="{call .rootClass/}__hint-content-text
                {sp}{call .rootClass/}__hint-content-text_favorite-empty">
        {call .contentTextAuthoroized_ /}
    </div>
     <div class="{call .rootClass/}__hint-content-list">
        {call .listSchools_ data="all" /}
    </div>
{/template}


/**
 * content text if array schools is empty
 */
{template .contentTextAuthoroized_ kind="html" private="true"}
    Пока&nbsp;вы&nbsp;ничего не&nbsp;добавили&nbsp;в&nbsp;избранное.
{/template}


/**
 * list of schools
 * @param params {{
 *     data: {
 *         schools: sm.bSchoolListPaged.Template.Params
 *     }
 * }}
 */
{template .listSchools_ kind="html" private="true"}
    {call cl.iFactory.FactoryManager.INSTANCE.renderTemplate}
        {param params: [
            'factory': 'stendhal',
            'type': 'school-list-paged',
            'renderParams': [
                'data': [
                    'schools': $params?.data?.schools
                ]
            ]
        ]/}
    {/call}
{/template}


/**
 * Tooltip content for state, when user not authorized
 */
{template .contentUserNotAuthorized}
    <div class="{call .rootClass/}__hint-content-text
                {sp}{call .rootClass/}__hint-content-text_user-not-authorized">
        {call .contentTextNotAuthorized_ /}
    </div>
{/template}


/**
 * content text if user not authorized
 */
{template .contentTextNotAuthorized_}
    {let $customClasses kind="html"}
        {call .rootClass/}__link{sp}
        {call .rootClass/}__link_authorize
    {/let}
    {call sm.bLink.Template.base}
        {param params:[
            'data': [
                'name': 'Войдите'
            ],
            'config': [
             'customClasses': $customClasses
            ]
        ] /}
    {/call}
    ,{sp}чтобы добавлять&nbsp;в&nbsp;избранное
{/template}


/**
 * Css classes
 * @param params {{
 *     data: {
 *         schools: ?Array<Object>
 *     },
 *     config: {
 *         isUserAuthorized: boolean
 *     }
 * }}
 * @override
 */
{template .additionalClasses}
    {if $params?.data?.schools and length($params?.data?.schools)}
        {sp}{call .rootClass/}_filled
    {/if}

    {if $params?.config?.isUserAuthorized}
        {sp}{call .rootClass/}_user-authorized
    {else}
        {sp}{call .rootClass/}_user-not-authorized
    {/if}
{/template}


/**
 * Root css class
 * @override
 */
{template .rootClass}
    b-favorite
{/template}
