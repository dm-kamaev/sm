{namespace sm.lSearchResult.bFilterLabels.Template}

/**
 * @typedef {object} sm.lSearchResult.bFilterLabels.Template.Params
 * @property {?object} data
 * @property {?{label: ?string, value: ?string}[]} data.filters
 * @property {?object} config
 * @property {?boolean} config.cannotBeHidden
 * @property {?number} config.filtersToShow
 * @property {?number} config.theme
 */

/**
 * Constructor
 * @param params {sm.lSearchResult.bFilterLabels.Template.Params}
 * @extends sm.lSearchResult.bFilter.Template
 * @constructor
 */
{template .base autoescape="strict" kind="html"}
    {call .init data="all"/}
{/template}


/**
 * Filter template
 * @param? params {
 *     filter: ?{
 *         label: ?string,
 *         value: ?string,
 *         isChecked: ?boolean
 *     },
 *     name: ?string
 * }
 * @override
 */
{template .filter autoescape="strict" kind="html"}
    {let $classes kind="html"}
        {call .rootClass/}__section

        {if $params.hidden}
            {sp}i-utils__hidden
        {/if}

        {if $params.hidable or $params.hidden}
            {sp}{call .rootClass/}__section_hidable
        {/if}
    {/let}

    {let $dataParams kind="html"}
        {call cl.iUtils.Utils.stringify}
            {param json: [
                'value': $params.filter.value,
                'label': $params.filter.label,
                'name': $params.name
            ]/}
        {/call}
    {/let}

    <div class="{$classes}" data-params="{$dataParams}">
        {call .item_ data="all" /}
        {call .cross_ /}
    </div>
{/template}


/**
 * Body template
 * @param? params {
 *     data: ?{
 *         name: string,
 *         filters: Array<Object>
 *     }
 * }
 * @override
 */
{template .button autoescape="strict" kind="html"}
    {let $filToShow kind="html"}
        {call .filToShow data="all" /}
    {/let}

    {call .buttonMore}
        {param params: [
            'numberHiddenItems': $params.data.filters.length - $filToShow - 1
        ]/}
    {/call}
{/template}


/**
 * Tempate button
 * @param? params {
 *     numberHiddenItems: ?number
 * }
 * @override
 */
{template .buttonMore kind="html"}
    {let $classes kind="html"}
        {call .rootClass/}__button{sp}
        {call .rootClass/}__button_more

        {if $params.numberHiddenItems <= 0}
            {sp}i-utils__hidden
        {/if}
    {/let}

    <span class="{$classes}">
        {call .buttonText_ /}
        {call .numberHiddenItems_ data="all"/}
    </span>
{/template}


/**
 * Button text
 */
{template .buttonText_ kind="html"}
    <span class="{call .rootClass/}__button-text">
        Еще{sp}
    </span>
{/template}


/**
 * Number Hidden Items
 * @param? params {
 *     numberHiddenItems: ?number
 * }
 */
{template .numberHiddenItems_ kind="html"}
    <span class="{call .rootClass/}__button-number">
        {$params.numberHiddenItems}
    </span>
{/template}


/**
 * Filter text
 * @param? params {
 *     filter: ?{
 *         label: ?string,
 *         value: ?string,
 *         isChecked: ?boolean
 *     },
 *     name: ?string
 * }
 */
{template .item_ autoescape="strict" kind="html"}
    <div class="{call .rootClass/}__filter">
        {call .input}
            {param params: [
                'filter': $params.filter,
                'name': $params.name,
                'id': $params.filter.value + '-selected'
            ]/}
        {/call}

        {call .label}
            {param params: [
                'filter': $params.filter,
                'name': $params.name,
                'id': $params.filter.value + '-selected'
            ]/}
        {/call}
    </div>
{/template}


/**
 * Filter template
 */
{template .cross_ autoescape="strict" kind="html"}
    {let $customClasses kind="html"}
        {call .rootClass/}__icon
    {/let}

    <div class="{call .rootClass/}__remove">
        {call cl.iFactory.FactoryManager.INSTANCE.renderTemplate}
            {param params: [
                'factory': 'stendhal',
                'type': 'icon',
                'renderParams': [
                    'data': [
                        'type': 'cross'
                    ],
                    'config': [
                        'customClasses': [$customClasses]
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * @override
 */
{template .additionalClasses}
    {call .rootClass/}_labels
{/template}
