{namespace sm.lHomeUniversity.bSearchPanelUniversity.Template}


/**
 * @typedef {sm.lHomeUniversity.bSearchPanelUniversity.Params.Data}
 * sm.lHomeUniversity.bSearchPanelUniversity.Template.Params.Data
 */


/**
 * @typedef {sm.lHomeUniversity.bSearchPanelUniversity.Params.Config}
 * sm.lHomeUniversity.bSearchPanelUniversity.Template.Params.Config
 */


/**
 * Constructor
 * @param params {{
 *     data: sm.lHomeUniversity.bSearchPanelUniversity.Template.Params.Data,
 *     config: sm.lHomeUniversity.bSearchPanelUniversity.Template.Params.Config
 * }}
 * @extends cl.iControl.Template
 * @factory sm.iCloblFactory.FactoryStendhal
 * @constructor
 */
{template .filterPanel}
    {call .init data="all"/}
{/template}

/**
 * @override
 */
{template .NAME}
    searchPanelUniversity
{/template}


/**
 * Body
 * @override
 */
{template .body}
    {call .upperBlock data="all" /}
    {call .lowerBlock data="all" /}
{/template}


/**
 * Upper block
 */
{template .upperBlock}
    <div class="{call .rootClass/}__upper-block">
        {call .titleArea data="all" /}
        {call .fieldsArea data="all" /}
    </div>
{/template}


/**
 * Lower block
 */
{template .lowerBlock}
    <div class="{call .rootClass/}__lower-block">
        {call .pickArea data="all" /}
        {call .buttonArea data="all" /}
    </div>
{/template}


/**
 * Title area
 */
{template .titleArea}
    <div class="{call .rootClass/}__title-area">
        {call .title data="all" /}
    </div>
{/template}

/**
 * Fields area
 */
{template .fieldsArea}
    <div class="{call .rootClass/}__fields-area">
        {call .searchCity data="all" /}
        {call .payType data="all" /}
    </div>
{/template}


/**
 * Pick area
 */
{template .pickArea}
    <div class="{call .rootClass/}__pick-area">
        {call .searchEge data="all" /}
    </div>
{/template}


/**
 * Button area
 */
{template .buttonArea}
    <div class="{call .rootClass/}__button-area">
        {call .button data="all" /}
    </div>
{/template}


/**
 * Title
 * @param params {{
 *     data: {
 *         title: string
 *     }
 * }}
 */
{template .title}
    <div class="{call .rootClass/}__title">
        {$params.data.title ?: ''}
    </div>
{/template}


/**
 * Button to search for entity on filters
 * @param params {{
 *     data: {
 *         button: ({
 *             content: string,
 *             theme: string,
 *             borderRoundSize: string
 *         }|undefined)
 *     }
 * }}
 */
{template .button}
    {let $customClasses kind="text"}
        {call .rootClass/}__button
    {/let}

    <div class="{call .rootClass/}__button-wrap">
        {call .renderChild}
            {param params: [
                'type': 'button',
                'renderParams': [
                    'data': [
                        'content': [
                            'default': $params.data.button.content ?: 'Подобрать'
                        ]
                    ],
                    'config': [
                        'customClasses': [$customClasses],
                        'theme': $params.data.button.theme,
                        'size': $params.data.button.size,
                        'borderRoundSize': $params.data.button?.borderRoundSize
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Button to search for entity on filters
 * @param params {{
 *     data: {
 *         payType: {
 *             content: sm.gList.Params.Item
 *         }
 *     }
 * }}
 */
{template .payType}
    {let $customClasses kind="text"}
        {call .rootClass/}__pay-type
    {/let}

   {let $opener kind="text"}
       {call .openirText}
           {param content: $params.data.payType.content /}
       {/call}
   {/let}

   <div class="{call .rootClass/}__pay-type-wrap">
       {call .renderChild}
           {param params: [
               'type': 'dropdown-select',
               'renderParams': [
                   'data': [
                       'defaultOpenerText': $opener,
                       'content': [
                           'items': $params.data.payType.content
                       ],
                       'contentConfig': [
                           'theme': 'neptune'
                       ]
                   ],
                   'config': [
                       'customClasses': [$customClasses],
                        'openerArrowIcon': [
                            'down': [
                                'default': [
                                    'iconName': 'filter-arrow-down'
                                ]
                            ]
                        ],
                        'openerTextIcon': [
                            'default': [
                                'iconType': 'icon-svg',
                                'iconName': 'coins'
                            ]
                        ],
                       'theme': 'neptune'
                   ]
               ]
           ] /}
       {/call}
   </div>
{/template}


/**
 * Button to search for entity on filters
 * @param content {sm.gList.Params.Item}
 */
{template .openirText}
    {let $checkedOpener kind="text"}
        {foreach $option in $content}
            {if $option?.isSelected}
                {$option.label}
            {/if}
        {/foreach}
    {/let}

    {if $checkedOpener == ''}
        {$content[(length($content) - 1)].label}
    {else}
        {$checkedOpener}
    {/if}
{/template}


/**
 * Button to search for entity on filters
 * @param params {{
 *     data: {
 *         searchCity: ({
 *             placeholder: string,
 *             text: string,
 *             sourceUrl: string,
 *             suggestList: ({
 *                 theme: string,
 *                 color: string,
 *                 isShifted: boolean
 *             }|undefined),
 *             icon: ({
 *                 name: string,
 *                 type: string,
 *                 position: string
 *             }|undefined)
 *         }|undefined)
 *     }
 * }}
 */
{template .searchCity}
    {let $customClasses kind="text"}
        {call .rootClass/}__search-city
    {/let}

    <div class="{call .rootClass/}__search-city-wrap">
            {call sm.bSearch.Template.base}
                {param params: [
                    'placeholder': $params.data.searchCity.placeholder,
                    'text': $params.data.searchCity.text,
                    'theme': $params.data.searchCity.theme,
                    'customClasses': $customClasses,
                    'inputSize': 'min',
                    'icon': $params.data.searchCity.icon,
                    'suggestList': $params.data.searchCity.suggestList,
                    'data': [
                        'sourceUrl': $params.data.searchCity.sourceUrl,
                        'argName': 'name',
                        'minLength': 2
                    ],
                    'config': [
                        'showSearchIcon': false,
                        'height': 'l'
                    ]
                ]/}
            {/call}
        </div>
{/template}


/**
 * Filters
 * @param params {{
 *     data: {
 *         ege: sm.lSearch.bFilter.Template.Params.Data
 *     },
 *     config: {
 *         optionsTheme: (string|undefined)
 *         checkboxIcon: options ({
 *             check: string,
 *             uncheck: string
 *         }|undefined)
 *     }
 * }}
 */
{template .searchEge}
    {let $customClasses kind="text"}
        {call .rootClass/}__search-ege
    {/let}

    <div class="{call .rootClass/}__search-ege-wrap">
        {call .renderChild}
            {param params: [
                'type': 'lSearch-filter',
                'renderParams': [
                    'data': $params.data.ege,
                    'config': [
                        'customClasses': [$customClasses],
                        'theme': 'wide',
                        'cannotBeHidden': true,
                        'showAllDefault': true,
                        'optionsToShow': 3,
                        'optionsTheme': $params.config.optionsTheme,
                        'customIcon': $params.config.checkboxIcon
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Attributes template
 * @param params {{
 *     data: {
 *         urlRedirect: string
 *     }
 * }}
 * @override
 */
{template .attributes kind="attributes"}
    data-params="{call cl.iUtils.Utils.stringify}
        {param json: quoteKeysIfJs([
            'urlRedirect': $params?.data.urlRedirect,
        ]) /}
    {/call}"
{/template}


/**
 * Root css class
 * @override
 */
{template .rootClass}
    b-search-panel-university
{/template}
