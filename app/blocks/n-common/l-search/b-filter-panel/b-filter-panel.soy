{namespace sm.lSearch.bFilterPanel.Template}


/**
 * @typedef {{
 *    filters: Array<{sm.lSearch.bFilter.Template.Params}>
 * }} sm.lSearch.bFilterPanel.Template.Params.Data
 */


/**
 * @typedef {{
 *     hasCheckedFilters: (boolean|undefined),
 *     stylizationModifier: string
 * }} sm.lSearch.bFilterPanel.Template.Params.Config
 */


/**
 * Constructor
 * @param params {{
 *     data: sm.lSearch.bFilterPanel.Template.Params.Data,
 *     config: sm.lSearch.bFilterPanel.Template.Params.Config
 * }}
 * @extends cl.iControl.Template
 * @factory sm.iCloblFactory.FactoryStendhal
 * @constructor
 */
{template .filterPanel}
    {call .init data="all"/}
{/template}

/**
 * @override
 */
{template .NAME}
    lSearch-filterPanel
{/template}


/**
 * Body
 * @param params {{
 *     data: sm.lSearch.bFilterPanel.Template.Params.Data,
 *     config: sm.lSearch.bFilterPanel.Template.Params.Config
 * }}
 * @override
 */
{template .body}
    {call .expander_ data="all" /}
    {call .content_ data="all" /}
{/template}


/**
 * Control for expand filters
 */
{template .expander_}
    <div class="{call .rootClass/}__expander">
        Показать фильтры

        <div class="{call .rootClass/}__expander-icon">
            {call .renderChild}
                {param params: [
                    'type': 'icon',
                    'renderParams': [
                        'data': [
                            'type': 'filter-arrow-down'
                        ]
                    ]
                ]/}
            {/call}
        </div>
    </div>
{/template}


/**
 * Content
 * @param params {{
 *     data: sm.lSearch.bFilterPanel.Template.Params.Data,
 *     config: sm.lSearch.bFilterPanel.Template.Params.Config
 * }}
 * @override
 */
{template .content_}
    <div class="{call .rootClass/}__content">
        {call .filtersList_ data="all" /}
        {call .button_ /}
        {call .tooltip_ /}
        {call .controlLinks_ data="all" /}
    </div>
{/template}


/**
 * Filters list
 * @param params {{
 *     data: {
 *         filters: Array<{sm.lSearch.bFilter.Template.Params}>
 *     }
 * }}
 */
{template .filtersList_}
    <div class="{call .rootClass/}__filters-list">
        {foreach $filter in $params.data.filters}
            {call .filter_}
                {param params: $filter/}
            {/call}
        {/foreach}
    </div>
{/template}


/**
 * Filters
 * @param params {{
 *     data: (sm.lSearch.bFilter.Template.Params.Data|
 *         sm.lSearch.bFilter.TemplateExtended.Params.Data|
 *         sm.lSearch.bFilter.TemplateSwitch.Params.Data|
 *         sm.lSearch.bFilter.TemplateInput.Params.Data|
 *         sm.lSearch.bFilter.TemplateDropdown.Params.Data
 *     ),
 *     config: {
 *         type: (string|undefined)
 *     }
 * }}
 */
{template .filter_}
    {let $classes kind="html"}
        {call .rootClass/}__filter-wrap{sp}

        {if $params?.config?.type}
            {call .rootClass/}__filter-wrap_{$params?.config?.type}
        {/if}
    {/let}

    {let $type kind="html"}
        {switch $params?.config?.type}
            {case 'extended'}
                lSearch-filterExtended
            {case 'switch'}
                lSearch-filterSwitch
            {case 'input'}
                lSearch-filterInput
            {case 'switch-labels'}
                lSearch-filterSwitchLabels
            {case 'dropdown'}
                lSearch-filterDropdown
            {case 'classes'}
                lSearch-filterClasses
            {default}
                lSearch-filter
        {/switch}
    {/let}

    <div class="{$classes}">
        {let $customClasses kind="html"}
            {call .rootClass/}__filter
        {/let}

        {call .renderChild}
            {param params: [
                'type': $type,
                'renderParams': [
                    'data': $params.data,
                    'config': augmentMap(
                        $params.config,
                        ['customClasses': [$customClasses]]
                    )
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Button to search for entity on filters
 */
{template .button_}
    <div class="{call .rootClass/}__button">
        {call .renderChild}
            {param params: [
                'type': 'button',
                'renderParams': [
                    'data': [
                        'content': 'Подобрать'
                    ],
                    'config': [
                        'theme': 'dark',
                        'size': 's'
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Tooltip with count of search result
 */
{template .tooltip_}
    {let $customClass kind="text"}
        {call .rootClass/}__tooltip
    {/let}
    <div class="{call .rootClass/}__tooltip-wrap">
        {call .renderChild}
            {param params: [
                'type': 'lSearch-tooltip',
                'renderParams': [
                    'data': [
                        'defaultText': 'Ничего не найдено',
                        'buttonLabel': 'Показать'
                    ],
                    'config': [
                        'customClasses': [
                            $customClass,
                            'i-utils__hidden'
                        ],
                        'button': [
                            'theme': 'carrot'
                        ]
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Links Controls for filters
 * @param params {{
 *     config: {
 *         hasCheckedFilters: (bool|undefined)
 *     }
 * }}
 */
{template .controlLinks_}
    <div class="{call .rootClass/}__control-links">
        {call .reset_ data="all" /}
        {call .collapser_ /}
    </div>
{/template}


/**
 * Control for reset filters
 * @param params {{
 *     config: {
 *         hasCheckedFilters: (bool|undefined)
 *     }
 * }}
 */
{template .reset_}
    {let $classes kind="html"}
        {call .rootClass/}__reset

        {if not $params?.config?.hasCheckedFilters}
            {sp}i-utils__hidden
        {/if}
    {/let}

    <div class="{$classes}">
        {call sm.bLink.Template.base}
            {param params: [
                'data': [
                    'name': 'Сбросить фильтр'
                ],
                'config': [
                    'theme': 'attention',
                    'size': 'large'
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Control for collapse filters
 */
{template .collapser_}
    <div class="{call .rootClass/}__collapser">
        {call sm.bLink.Template.base}
            {param params: [
                'data': [
                    'name': 'Свернуть фильтр'
                ],
                'config': [
                    'size': 'large'
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Css classes
 * @override
 */
{template .additionalClasses}
    {call .rootClass /}_state_collapsed
{/template}


/**
 * Root css class
 * @override
 */
{template .rootClass}
    b-filter-panel
{/template}
