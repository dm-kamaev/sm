{namespace sm.lSearch.bSearchResults.Template}

/**
 * @typedef {{
 *     title: (string|undefined),
 *     description: (Array<string>|undefined),
 *     linksTitle: (string|undefined),
 *     links: (Array<sm.bSmLink.SmLink.Template.Params.Data>|undefined),
 *     sort: (sm.gDropdown.TemplateSelect.Params.Data|
 *            sm.bSmSwitch.Template.Params.Data),
 *     entityList: sm.bSmItemList.Template.Params.Data,
 *     countResults: number,
 *     headerText:
 *          sm.lSearch.bSearchResults.Template.Params.Data.headerText
 * }} sm.lSearch.bSearchResults.Template.Params.Data
 */


/**
 * @typedef {{
 *     [sortController = 'dropdown-list-links']: ('smSwitch'|undefined)
 * }} sm.lSearch.bSearchResults.Template.Params.Config
 */


/**
 * @typedef {Array<{
 *     number: (number|undefined),
 *     text: (string|{
 *         nom: string,
 *         gen: string,
 *         plu: string
 *     })
 * }>} sm.lSearch.bSearchResults.Template.Params.Data.headerText
 */


/**
 * Template for SearchResults block
 * @param params {{
 *     data: sm.lSearch.bSearchResults.Template.Params.Data
 * }}
 * @constructor
 * @factory sm.iCloblFactory.FactoryStendhal
 * @extends cl.iControl.Template
 */
{template .searchResults}
    {call .init data="all" /}
{/template}

/**
 * @override
 */
{template .NAME}
    lSearch-searchResults
{/template}

/**
 * @override
 */
{template .body}
    {call .results_ data="all" /}
    {call .placeholder_ /}
    {call .loader_ /}
{/template}

/**
 * Results template, contains: header, sort control, item list
 * @param params {{
 *     data: sm.lSearch.bSearchResults.Template.Params.Data
 * }}
 * @private
 */
{template .results_ kind="html"}
    <div class="{call .rootClass /}__results
        {sp}i-animate">
        {call .header_ data="all" /}
        {call .sort_ data="all" /}
        {call .list_ data="all" /}
        {call .showMoreButton_ /}
    </div>
{/template}

/**
 * Placeholder for empty results template
 * @private
 */
{template .placeholder_ kind="html"}
    <div class="{call .rootClass /}__placeholder">
        <div class="{call .rootClass /}__placeholder-title">
            Ничего не найдено
        </div>
        <div class="{call .rootClass /}__placeholder-subtitle">
            Измените параметры поиска
        </div>
        <div class="{call .rootClass /}__placeholder-subtitle">
            и попробуйте ещё раз.
        </div>
    </div>
{/template}

/**
 * Text of header for list of schools
 * @param params {{
 *     data: {
 *         title: (string|undefined),
 *         description: (string|undefined),
 *         linksTtile: (string|undefined),
 *         links: (Array<sm.bSmLink.SmLink.Template.Params.Data>|undefined),
 *         headerText:  [
 *             number: (number|undefined),
 *             text: (string|{
 *                 nom: string,
 *                 gen: string,
 *                 plu: string
 *             },
 *             select: ('text'|'number'|'all'|undefined)
 *         ]
 *     },
 *     config: {
 *         notActive: boolean
 *     }
 * }}
 */
{template .header_ kind="html"}
    {let $classes kind="html"}
        {call .rootClass/}__header
        {if not $params?.config?.notActive}
            {sp}{call .rootClass /}__header_active
        {/if}

        {if $params.data?.title}
            {sp}{call .rootClass /}__header_seo
        {/if}
    {/let}

    <div class="{$classes}">
        {if $params.data.title}
            {call .headerSeo_ data="all" /}
        {/if}
        <span class="{call .rootClass/}__header-text">
            {call .generateHeaderText data="all" /}
        </span>
    </div>
{/template}


/**
 * Text of header for results
 * @param params {{
 *     data: {
 *         title: (string|undefined),
 *         description: (string|undefined),
 *         linksTtile: (string|undefined),
 *         links: (Array<sm.bSmLink.SmLink.Template.Params.Data>|undefined)
 *     }
 * }}
 */
{template .headerSeo_}
    {call .headerTextSeo_ data="all" /}
    {call .headerDescriptionSeo_ data="all" /}
    {call .headerLinksTitleSeo_ data="all" /}
    {call .headerLinksSeo_ data="all" /}
{/template}


/**
 * Text of header for results
 * @param params {{
 *     data: {
 *         title: (string|undefined),
 *         description: (string|undefined)
 *     }
 * }}
 */
{template .headerTextSeo_}
    <h1 class="{call .rootClass/}__header-title">
        {$params.data.title}
    </h1>
{/template}


/**
 * Description of header for results
 * @param params {{
 *     data: {
 *         description: (string|undefined)
 *     }
 * }}
 */
{template .headerDescriptionSeo_}
    {if $params.data.description}
        <div class="{call .rootClass/}__header-description">
            {$params.data.description}
        </div>
    {/if}
{/template}


/**
 * Links title of header
 * @param params {{
 *     data: {
 *         linksTitle: (string|undefined)
 *     }
 * }}
 */
{template .headerLinksTitleSeo_}
    {if $params.data.links and $params.data.linksTitle}
        <div class="{call .rootClass/}__header-links-title">
            {$params.data.linksTitle}
        </div>
    {/if}
{/template}


/**
 * Links of header
 * @param params {{
 *     data: {
 *         links: (Array<sm.bSmLink.SmLink.Template.Params.Data>|undefined),
 *     }
 * }}
 */
{template .headerLinksSeo_}
    {if $params.data.links}
        <div class="{call .rootClass/}__header-links">
            {foreach $link in $params.data.links}
                {call .linkSeo_}
                    {param params: [
                        'data': $link
                    ]/}
                {/call}
            {/foreach}
        </div>
    {/if}
{/template}


/**
 * Template link of header
 * @param params {{
 *     data: sm.bSmLink.SmLink.Template.Params.Data
 * }}
 */
{template .linkSeo_}
    <div class="{call .rootClass/}__link {call .rootClass/}__link_seo">
        {call .renderChild}
            {param params: [
                'type': 'smLink',
                'renderParams': [
                    'data': $params.data,
                    'config': [
                        'theme': 'default',
                        'size': 'm'
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}




/**
 * Entity type for list header
 * @param params {{
 *     data: {
 *         headerText:  [
 *             number: (number|undefined),
 *             text: (string|{
 *                 nom: string,
 *                 gen: string,
 *                 plu: string
 *             },
 *             select: ('text'|'number'|'all'|undefined)
 *         ]
 *      }
 * }}
 */
{template .generateHeaderText}
    {if $params.data.headerText}
        {foreach $item in $params.data.headerText}
            {if $item.number}
                {let $selected: $item.select == 'number'
                             or $item.select == 'all' /}
                {call .headerTextSelectWrapper_}
                    {param isSelected: $selected /}
                    {param text: $item.number /}
                {/call}
            {/if}
            {if $item.text}
                {call .headerTextPart_}
                    {param item: $item /}
                {/call}
            {/if}
        {/foreach}
    {/if}
{/template}


/**
 * Entity type for list header
 * @param text {string|number}
 * @param isSelected {boolean}
 */
{template .headerTextSelectWrapper_}
    {sp}
    {if $isSelected}<span class="{call .rootClass/}__header-text_selected">{/if}
        {$text}
    {if $isSelected}</span>{/if}
{/template}


/**
 * Entity type for list header
 * @param item {{
 *     number: (number|undefined),
 *     text: (string|{
 *         nom: string,
 *         gen: string,
 *         plu: string
 *     },
 *     select: ('none'|'text'|'number'|'all')
 * }}
 */
{template .headerTextPart_}
    {let $text kind="text"}
        {if $item.text.nom}
            {call cl.iUtils.Utils.declensionPrint}
                 {param params: [
                     'num': $item.number,
                     'nom': $item.text.nom,
                     'gen': $item.text.gen,
                     'plu': $item.text.plu
                 ]/}
             {/call}
        {else}
            {$item.text}
        {/if}
    {/let}

    {call .headerTextSelectWrapper_}
        {param isSelected: $item.select == 'text' or $item.select == 'all' /}
        {param text: $text /}
    {/call}
{/template}


/**
 * Sort template
 * @param params {{
 *     data: {
 *         sort: sm.gDropdown.TemplateSelect.Params.Data
 *     }
 * }}
 * @private
 */
{template .sort_ kind="html"}
    <div class="{call .rootClass /}__sort">
        {if $params.config?.sortController == 'smSwitch'}
            {call .sort_switch_ data="all" /}
        {else}
            {call .sort_dropdown_ data="all" /}
        {/if}
    </div>
{/template}

/**
 * Sort dropdown template
 * @param params {{
 *     data: {
 *         sort: (sm.gDropdown.TemplateSelect.Params.Data|
 *                sm.bSmSwitch.Template.Params.Data)
 *     }
 * }}
 * @private
 */
{template .sort_dropdown_}
    {let $customClasses kind="html"}
        {call .rootClass /}__sort-control_dropdown
    {/let}
    <div class="{call .rootClass /}__horizontal-line"></div>
    <div class="{call .rootClass /}__sort-control-wrap_dropdown">
        {call .renderChild}
            {param params: [
                'type': 'dropdown-list-links',
                'renderParams': [
                    'data': $params.data.sort,
                    'config': [
                        'viewType': 'link',
                        'iconSprite': 'small-opener-arrow',
                        'theme': 'dense',
                        'openerSize': 'm',
                        'contentSize': 'm',
                        'customClasses': [$customClasses]
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Sort switch template
 * @param params {{
 *     data: {
 *         sort: sm.bSmSwitch.Template.Params.Data
 *     }
 * }}
 * @private
 */
{template .sort_switch_}
    {let $customClasses kind="html"}
        {call .rootClass /}__sort-control_switch
    {/let}
    <div class="{call .rootClass /}__sort-control-wrap_switch">
        {call .renderChild}
            {param params: [
                'type': 'smSwitch',
                'renderParams': [
                    'data': $params.data.sort,
                    'config': [
                        'size': 'xxxl',
                        'linksTheme': 'hoar',
                        'customClasses': [$customClasses]
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Item list template
 * @param params {{
 *     data: {
 *         entityList: Array<sm.bSmItem.SmItem.Params.Data>
 *     }
 * }}
 */
{template .list_ kind="html"}
    {let $customClasses kind="html"}
        {call .rootClass /}__item-list
        {sp}i-animate
    {/let}

    {call .renderChild}
        {param params: [
           'type': 'smItemList',
           'renderParams': [
               'data': $params.data.entityList,
               'config': [
                   'showLine': true,
                   'customClasses': [$customClasses]
               ]
           ]
       ] /}
    {/call}
{/template}

/**
 * Loader template
 */
{template .loader_ kind="html"}
    <div class="{call .rootClass /}__loader
        {sp}{cl.iUtils.Utils.CssClass.HIDDEN}
        {sp}i-animate">
        <div class="{call .rootClass /}__loader-image">
        </div>
    </div>
{/template}


/**
 * Show more button template
 * @private
 */
{template .showMoreButton_ kind="html"}
    {let $cssClasses kind="html"}
        {call .rootClass /}__show-more-button-wrap
        {sp}{cl.iUtils.Utils.CssClass.HIDDEN}
    {/let}

    {let $buttonCustomClasses kind="html"}
        {call .rootClass /}__show-more-button
    {/let}

    {let $buttonContent kind="html"}
        Показать ещё
    {/let}

    <div class="{$cssClasses}">
        {call .renderChild}
            {param params: [
                'type': 'button',
                'renderParams': [
                    'data': [
                        'content': [
                            'default': $buttonContent
                        ]
                    ],
                    'config': [
                        'theme': 'thin',
                        'customClasses': [$buttonCustomClasses]
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Additional classes
 * @param params {{
 *     data: {
 *          search: {
 *               countResults: number
 *          }
 *     }
 * }}
 * @override
 */
{template .additionalClasses kind="html"}
    i-animate

    {if $params.data.countResults == 0}
        {sp}{call .rootClass /}_empty-results
    {else}
        {sp}{call .rootClass /}_not-empty-results
    {/if}
{/template}

/**
 * @override
 */
{template .rootClass}
    b-search-results
{/template}
