{namespace sm.lSearch.bFilter.TemplateInput}


/**
 * @typedef {{
 *     name: string,
 *     header: ({
 *         title: (string|undefined),
 *         tooltip: (string|undefined)
 *     }|undefined),
 *     options: Array<{
 *         label: (string|undefined),
 *         placeholder: ?string,
 *         value: ?string,
 *         maxLength: ?number,
 *         type: ?string,
 *         isHidden: ?boolean
 *     }>,
 *     placeholder: ?{
 *        text: string,
 *        isHidden: boolean
 *     },
 *     minOptionsToShowPlaceholder: ?number
 * }} sm.lSearch.bFilter.TemplateInput.Params.Data
 */


/**
 * @typedef {{
 *     data: sm.lSearch.bFilter.TemplateInput.Params.Data,
 *     config: sm.lSearch.bFilter.Template.Params.Config
 * }} sm.lSearch.bFilter.TemplateInput.Params
 */


/**
 * Constructor
 * @param params {sm.lSearch.bFilter.TemplateInput.Params}
 * @extends sm.lSearch.bFilter.Template
 * @factory sm.iCloblFactory.FactoryStendhal
 * @constructor
 */
{template .filter}
    {call .init data="all"/}
{/template}

/**
 * @override
 */
{template .NAME}
    lSearch-filterInput
{/template}


/**
 * List options template
 * @param params {{
 *     data: {
 *         name: string,
 *         options: Array<{
 *             label?: string,
 *             name?: string,
 *             placeholder?: string,
 *             value?: (string|number),
 *             maxLength: ?number,
 *             type: ?string,
 *             isHidden: ?boolean
 *         }>
 *     },
 *     config: {
 *         optionsToShow: (number|undefined),
 *         type: (string|undefined),
 *         stylizationModifier: string,
 *         theme: (string|undefined)
 *     }
 * }}
 * @public
 */
{template .listOptions}
    {let $numberOptionsToShow kind="html"}
        {call .numberOptionsToShow data="all" /}
    {/let}

    <div class="{call .rootClass/}__list-options">
        {for $i in range($params.data.options.length)}

            {let $isHidden: $params.data.options[$i].isHidden or
                ($i + 1 > $numberOptionsToShow ? true : false)/}

            {call .option}
                {param params: [
                    'data': [
                        'name': $params.data.options[$i].name ?:
                            $params.data.name,
                        'label': $params.data.options[$i].label,
                        'placeholder': $params.data.options[$i].placeholder,
                        'value': $params.data.options[$i].value,
                        'maxLength': $params.data.options[$i].maxLength,
                        'type': $params.data.options[$i].type
                    ],
                    'config': [
                        'hidden': $isHidden,
                        'hidable':  $isHidden,
                        'stylizationModifier': $params.config.stylizationModifier,
                        'theme': $params.config.theme ?
                            $params.config.theme : 'light',
                        'inline': $params.config.inline
                    ]
                ]/}
            {/call}
        {/for}
    </div>
{/template}


/**
 * Option template
 * @param params {{
 *     data: {
 *         name: string,
 *         label: (string|undefined),
 *         placeholder: ?string,
 *         value: ?string,
 *         maxLength: ?number,
 *         type: ?string
 *     },
 *     config: {
 *         hidden: (boolean|undefined),
 *         hidable: (boolean|undefined),
 *         stylizationModifier: string,
 *         inline: (boolean|undefined)
 *     }
 * }}
 * @public
 */
{template .option}
    {let $classes kind="html"}
        {call .rootClass/}__option

        {if $params.config?.hidden}
            {sp}i-utils__hidden
        {/if}

        {if $params.config?.hidable}
            {sp}{call .rootClass/}__option_hidable
        {/if}
    {/let}

    <div class="{$classes}">
        {if $params.config.inline}
            {call .inputLabel_ data="all" /}
            {call .input_ data="all" /}
        {else}
            {call .input_ data="all" /}
            {call .inputLabel_ data="all" /}
        {/if}
    </div>
{/template}


/**
 * Filter content template
 * @param params {{
 *     data: {
 *         name: string,
 *         options: Array<{
 *             label?: string,
 *             name?: string,
 *             placeholder?: string,
 *             value?: (string|number),
 *             maxLength: ?number,
 *             type: ?string,
 *             isHidden: ?boolean
 *         }>,
 *         placeholder: ?{
 *            text: string,
 *            isHidden: boolean
 *         },
 *         minOptionsToShowPlaceholder: ?number
 *     },
 *     config: {
 *         type: (string|undefined),
 *         optionsToShow: (number|undefined),
 *         cannotBeHidden: (boolean|undefined),
 *         isShowed: (bolean|undefined),
 *         showMoreButtonText: (number|undefined),
 *         align: (string|undefined),
 *         stylizationModifier: string
 *     }
 * }}
 * @override
 * @protected
 */
{template .content}
    {let $classes kind="html"}
        {call .rootClass/}__content

        {if not $params?.config?.cannotBeHidden}
            {if not $params?.config?.isShowed}
                {sp}i-utils__hidden
            {/if}
        {/if}
    {/let}

    <div class="{$classes}">
        {call .description data="all" /}
        {call .placeholder_ data="all" /}
        {call .listOptions data="all" /}
        {call .button data="all" /}
    </div>
{/template}


/**
 * Template button
 * @param params {{
 *     data: {
 *         options: Array<{
 *             value: ?string
 *         }>
 *     }
 * }}
 * @override
 * @protected
 */
{template .button}
    {let $isEmptyInputs kind="html"}
        {for $i in range($params.data.options.length)}
            {if not $params.data.options[$i]?.value}
                true
            {/if}
        {/for}
    {/let}

    {call .resetButton_}
        {param isEmptyInputs: $isEmptyInputs/}
    {/call}
{/template}


/**
 * Reset button
 * @param isEmptyInputs {boolean}
 * @private
 */
{template .resetButton_}
    {let $classes kind="html"}
        {call .rootClass/}__button{sp}
        {call .rootClass/}__button_reset{sp}

        {if $isEmptyInputs}
            i-utils__hidden
        {/if}
    {/let}

    <div class="{$classes}">
        {call sm.bLink.Template.base}
            {param params: [
                'data': [
                    'name': 'Сбросить'
                ],
                'config': [
                    'theme': 'attention',
                    'size': 'large'
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Template plaseholder
 * @param params {{
 *     data: {
 *          options: Array<{
 *             label?: string,
 *             name?: string,
 *             placeholder?: string,
 *             value?: (string|number),
 *             maxLength: ?number,
 *             type: ?string,
 *             isHidden: ?boolean
 *         }>,
 *         placeholder: ?{
 *            text: string,
 *            isHidden: boolean
 *         }
 *     }
 * }}
 * @private
 */
{template .placeholder_}
    {if $params.data?.placeholder?.text}
        {let $classes kind="html"}
            {call .rootClass/}__placeholder

            {if $params.data?.placeholder?.isHidden}
                {sp}{cl.iUtils.Utils.CssClass.HIDDEN}
            {/if}
        {/let}

        <div class="{$classes}">
            {$params.data.placeholder.text}
        </div>
    {/if}
{/template}


/**
 * Input template
 * @param params {{
 *     data: {
 *         name: string,
 *         placeholder: ?string,
 *         value: ?string,
 *         maxLength: number,
 *         type: ?string
 *     },
 *     config: {
 *         stylizationModifier: string,
 *         theme: string
 *     }
 * }}
 * @private
 */
{template .input_}
    <div class="{call .rootClass/}__input">
        {call .renderChild}
            {param params: [
                'type': 'input',
                'renderParams': [
                    'data': $params.data,
                    'config': [
                        'theme': $params.config.theme
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Input title template
 * @param params {{
 *     data: {
 *         title: (string|undefined),
 *         label: (string|undefined)
 *     }
 * }}
 * @private
 */
{template .inputLabel_}
    {if $params.data?.label}
        <div class="{call .rootClass/}__input-label">
            {$params.data.label}
        </div>
    {/if}
{/template}


/**
 * Css classes
 * @param params {{
 *     config: {
 *         inline: (boolean|undefined)
 *     }
 * }}
 * @override
 */
{template .additionalClasses}
    {call .rootClass/}_input
    {if $params.config.inline}
        {sp}{call .rootClass/}_input_inline
    {/if}
{/template}


/**
 * Attributes
 * @param params {{
 *     data: {
 *         name: string,
 *         minOptionsToShowPlaceholder: ?number
 *     },
 *     config: {
 *         type: (string|undefined),
 *         optionsTheme: ?string
 *         customIcon: ({
 *             check: string,
 *             uncheck: string
 *         }|undefined)
 *     }
 * }}
 * @override
 */
{template .attributes kind="attributes"}
    {let $data kind="html"}
        {call cl.iUtils.Utils.stringify}
            {param json: [
                'name': $params.data.name,
                'type': $params?.config?.type,
                'optionsTheme': $params?.config?.optionsTheme,
                'customIcon': $params?.config?.customIcon,
                'minOptionsToShowPlaceholder':
                    $params.data.minOptionsToShowPlaceholder ?: 0
            ]/}
        {/call}
    {/let}

    data-params="{$data}"
{/template}
