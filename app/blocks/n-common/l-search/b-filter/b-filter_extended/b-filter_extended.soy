{namespace sm.lSearch.bFilter.TemplateExtended}


/**
 * @typedef {{
 *     name: string,
 *     header: ({
 *         title: (string|undefined),
 *         tooltip: (string|undefined)
 *     }|undefined),
 *     options: Array<{
 *         label: string,
 *         value: string,
 *         isChecked: (boolean|undefined)
 *     }>,
 *     api: string,
 *     apiPopular: ?string,
 *     modal: {
 *         header: (string|undefined),
 *         placeholder: (string|undefined),
 *         filterHeader: (string|undefined),
 *         theme: (string|undefined)
 *     }
 * }} sm.lSearch.bFilter.TemplateExtended.Params.Data
 */


/**
 * @typedef {{
 *     type: (string|undefined),
 *     optionsToShow: (boolean|undefined),
 *     cannotBeHidden: (boolean|undefined),
 *     isShowed: (boolean|undefined),
 *     showMoreButtonText: (number|undefined),
 *     theme: ('light'|'minimal'|undefined),
 *     align: (string|undefined),
 *     customClasses: (Array<string>|undefined),
 *     stylizationModifier: string
 * }} sm.lSearch.bFilter.TemplateExtended.Params.Config
 */


/**
 * @typedef {{
 *     data: sm.lSearch.bFilter.TemplateExtended.Params.Data,
 *     config: sm.lSearch.bFilter.TemplateExtended.Params.Config
 * }} sm.lSearch.bFilter.TemplateExtended.Params
 */


/**
 * Constructor
 * @param params {sm.lSearch.bFilter.TemplateExtended.Params}
 * @extends sm.lSearch.bFilter.Template
 * @factory sm.iCloblFactory.FactoryStendhal
 * @constructor
 */
{template .filter}
    {call .init data="all"/}
{/template}

/**
 * @override
 */
{template .NAME}
    lSearch-filterExtended
{/template}


/**
 * Tempate button
 * @param params {{
 *     config: {
 *         showMoreButtonText: (number|undefined)
 *     }
 * }}
 * @override
 */
{template .button}
    {let $showMoreButtonText kind="html"}
        {if $params.config?.showMoreButtonText}
            {$params.config?.showMoreButtonText}
        {else}
            Полный список
        {/if}
    {/let}

    {call .showMoreButton}
        {param text: $showMoreButtonText/}
    {/call}
{/template}


/**
 * Show more template
 * @param text {string}
 * @override
 */
{template .showMoreButton}
    <div class="{call .rootClass/}__button{sp}
                {call .rootClass/}__button_show-modal">
        {call sm.bLink.Template.base}
            {param params: [
                'data': [
                    'name': $text
                ],
                'config': [
                    'size': 'large'
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * @override
 */
{template .additionalClasses}
    {call .rootClass/}_extended
{/template}


/**
 * Attributes
 * @param params {{
 *     data: {
 *         name: string,
 *         header: ({
 *             title: (string|undefined),
 *             tooltip: (string|undefined)
 *         }|undefined),
 *         api: string,
 *         apiPopular: ?string,
 *         optionsToShow: (number|undefined),
 *         modal: {
 *             header: (string|undefined),
 *             placeholder: (string|undefined),
 *             filterHeader: (string|undefined),
 *             theme: (string|undefined)
 *         }
 *     },
 *     config: {
 *         type: (string|undefined),
 *         optionsTheme: (string|undefined),
 *         customIcon: ({
 *             check: string,
 *             uncheck: string
 *         }|undefined)
 *     }
 * }}
 * @override
 */
{template .attributes kind="attributes"}
    {let $customIcon: $params.config.customIcon ?
        quoteKeysIfJs([
            'check': $params.config.customIcon.check,
            'uncheck': $params.config.customIcon.uncheck
        ]) : undefined
    /}

    {let $data kind="html"}
        {call cl.iUtils.Utils.stringify}
            {param json: quoteKeysIfJs([
                'name': $params.data.name,
                'type': $params?.config?.type,
                'api': $params.data.api,
                'apiPopular': $params.data.apiPopular ?: '',
                'optionsToShow': $params?.config?.optionsToShow,
                'modal': quoteKeysIfJs([
                    'header': $params.data.modal?.header ?: $params.data.header?.title,
                    'placeholder': $params.data.modal?.placeholder ?: '',
                    'filterHeader': $params.data.modal?.filterHeader ?: '',
                    'theme': $params.data.modal?.theme ?: ''
                ]),
                'optionsTheme': $params?.config?.optionsTheme,
                'customIcon': $customIcon
            ])/}
        {/call}
    {/let}

    data-params="{$data}"
{/template}
