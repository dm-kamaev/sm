{namespace sm.lErrorNotFound.Template}


/**
 * @typedef {{
 *     openGraph: (sm.iLayout.TemplateStendhal.Params.Data.openGraph|undefined),
 *     seo: {
 *         metaTitle: string,
 *         metaDescription: (string|undefined)
 *     },
 *     error: {
 *         text: string
 *     },
 *     subHeader: sm.bSmSubheader.Template.Params.Data,
 *     popular: ({
 *         header: string,
 *         list: sm.bSmItemList.Template.Params.Data,
 *         catalog: sm.bSmItem.TemplateCompact.Params.Data
 *     }|undefined)
 * }} sm.lErrorNotFound.Template.Params.Data
 */


/**
 * Error not found page
 * @param params {{
 *     data: sm.lErrorNotFound.Template.Params.Data,
 *     config: ?sm.iLayout.TemplateStendhal.Params.Config
 * }}
 * @extends sm.iLayout.TemplateStendhal
 * @constructor
 * @doc
 */
{template .errorNotFound autoescape="strict" kind="html"}
    {call .document data="all" /}
{/template}


/**
 * Add layout script to page
 * @param params {{
 *     config: {
 *         staticVersion: (string|undefined)
 *     }
 * }}
 * @protected
 * @override
 */
{template .layoutScript kind="html"}
    {call cl.iStatic.Template.script}
        {param path: '/static/l-error-not-found.js' /}
        {param staticVersion: $params?.config?.staticVersion /}
    {/call}
{/template}


/**
 * Content
 * @param params {{
 *     data: {
 *         error: {
 *             text: string
 *         },
 *         popular: ({
 *             header: string,
 *             list: sm.bSmItemList.Template.Params.Data,
 *             catalog: sm.bSmItem.TemplateCompact.Params.Data
 *         }|undefined)
 *     }
 * }}
 * @override
 * @protected
 */
{template .mainContent autoescape="strict" kind="html"}
    <div class="{call .rootClass/}__body">
        {call .sectionContent_ data="all" /}
        {call .sectionPopular_ data="all" /}
    </div>
{/template}


/**
 * Section content with error information
 * @param params {{
 *     data: {
 *         error: {
 *             text: string
 *         }
 *     }
 * }}
 */
{template .sectionContent_}
    <div class="{call .rootClass/}__section
        {sp}{call .rootClass/}__section_content">

        {call .errorInformation_ data="all" /}
    </div>
{/template}


/**
 * Section with popular entities
 * @param params {{
 *     data: {
 *         popular: ({
 *             header: string,
 *             popular: sm.bSmItemList.Template.Params.Data,
 *             catalog: sm.bSmItem.TemplateCompact.Params.Data
 *         }|undefined)
 *     }
 * }}
 */
{template .sectionPopular_}
    {if $params.data.popular}
        <div class="{call .rootClass/}__section
                {sp}{call .rootClass/}__section_popular">
            {call .headerPopular_ data="all" /}
            {call .popular_ data="all" /}
            {call .catalog_ data="all" /}
        </div>
    {/if}
{/template}



/**
 * Header
 * @param params {{
 *     data: {
 *         popular: ({
 *             header: string,
 *         }|undefined)
 *     }
 * }}
 */
{template .headerPopular_}
    <div class="{call .rootClass/}__section-header{sp}
                {call .rootClass/}__section-header_popular">
        {$params.data.popular.header}
    </div>
{/template}


/**
 * Popular entities
 * @param params {{
 *     data: {
 *         popular: ({
 *             list: sm.bSmItemList.Template.Params.Data,
 *         }|undefined)
 *     }
 * }}
 */
{template .popular_}
    {let $customClasses kind="html"}
        {call .rootClass/}__popular-list
    {/let}

    <div class="{call .rootClass/}__popular">
        {call cl.iFactory.FactoryManager.INSTANCE.renderTemplate}
            {param params: [
                'factory': $params.config.modifier,
                'type': 'smItemList',
                'renderParams': [
                    'data': $params.data.popular.list,
                    'config': [
                        'enableCover': true,
                        'theme': 'inline',
                        'customClasses': [$customClasses]
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Catalog
 * @param params {{
 *     data: {
 *         popular: ({
 *             catalog: sm.bSmItem.TemplateCompact.Params.Data
 *         }|undefined)
 *     }
 * }}
 */
{template .catalog_}
    {let $customClasses kind="html"}
        {call .rootClass/}__catalog-item
    {/let}

    <div class="{call .rootClass/}__catalog">
        {call cl.iFactory.FactoryManager.INSTANCE.renderTemplate}
            {param params: [
                'factory': $params.config.modifier,
                'type': 'smItemCompact',
                'renderParams': [
                    'data': $params.data.popular.catalog,
                    'config': [
                        'theme': 'inline',
                        'enableCover': true,
                        'customClasses': [$customClasses]
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Error information
 * @param params {{
 *     data: {
 *         error: {
 *             text: string
 *         }
 *     }
 * }}
 */
{template .errorInformation_}
    <div class="{call .rootClass/}__wrapper-error-information">
        <div class="{call .rootClass/}__error-information i-utils__clearfix">
            {call .errorImg_/}
            {call .errorText_ data="all"/}
        </div>
    </div>
{/template}


/**
 * Error img
 */
{template .errorImg_}
    <img class="{call .rootClass/}__error-img"
        src="/static/images/n-common/l-error-not-found/404.svg" alt="Ошибка">
{/template}


/**
 * Error text
 * @param params {{
 *     data: {
 *         error: {
 *             text: string
 *         }
 *     }
 * }}
 */
{template .errorText_}
    <div class="{call .rootClass/}__wrapper-error-text">
        <div class="{call .rootClass/}__error-text">
            {call soydata.VERY_UNSAFE.ordainSanitizedHtml
            data="$params.data.error.text" /}
        </div>
    </div>
{/template}


/**
 * Root css class
 * @override
 */
{template .rootClass}
    l-error-not-found
{/template}