/**
 * @fileOverview itemType can be smItem, smItemEntity, smItemCompact, smLink,
 * lCourse-department, smComment
 */

{namespace sm.bSmItemList.Template}


/**
 * @typedef {{
 *     items: Array<(
 *         sm.bSmItem.Template.Params.Data|
 *         sm.bSmItem.TemplateEntity.Params.Data|
 *         sm.bSmItem.TemplateCompact.Params.Data|
 *         sm.bSmLink.Template.Params.Data|
 *         sm.lCourse.bDepartment.Template.Params.Data
 *     )>,
 *     itemType: string,
 *     countItemsPerPage: (number|undefined),
 *     itemConfig: (
 *         sm.bSmItem.Template.Params.Config|
 *         sm.bSmItem.TemplateEntity.Params.Config|
 *         sm.bSmItem.TemplateCompact.Params.Config|
 *         sm.bSmLink.Template.Params.Config|
 *         undefined
 *     )
 * }} sm.bSmItemList.Template.Params.Data
 */


/**
 * @typedef {{
 *     stylizationModifier: (string|undefined),
 *     customClasses: (Array<string>|undefined),
 *     theme: ('light'|undefined),
 *     showLine: (boolean|undefined)
 * }} sm.bSmItemList.Template.Params.Config
 */


/**
 * Constructor
 * @param params {{
 *     data: sm.bSmItemList.Template.Params.Data,
 *     config: (sm.bSmItemList.Template.Params.Config|undefined)
 * }}
 * @extends cl.iControl.Template
 * @constructor
 */
{template .itemList}
    {call .init data="all"/}
{/template}


/**
 * Body
 * @param params {{
 *     data: sm.bSmItemList.Template.Params.Data
 *     config: ?sm.bSmItemList.Template.Params.Config
 * }}
 * @override
 */
{template .body}
    {call .sectionContent_ data="all" /}
{/template}


/**
 * Section content
 * @param params {{
 *     data: {
 *         items: Array<(
 *             sm.bSmItem.Template.Params.Data|
 *             sm.bSmItem.TemplateEntity.Params.Data|
 *             sm.bSmItem.TemplateCompact.Params.Data|
 *             sm.bSmLink.Template.Params.Data|
 *             sm.lCourse.bDepartment.Template.Params.Data
 *         )>,
 *         itemType: string,
 *         countItemsPerPage: (number|undefined),
 *         itemConfig: (
 *             sm.bSmItem.Template.Params.Config|
 *             sm.bSmItem.TemplateEntity.Params.Config|
 *             sm.bSmItem.TemplateCompact.Params.Config|
 *             sm.bSmLink.Template.Params.Config|
 *             undefined
 *         )
 *     },
 *     config: {
 *         stylizationModifier: (string|undefined)
 *     }
 * }}
 */
{template .sectionContent_}
    <div class="{call .rootClass/}__section{sp}
                {call .rootClass/}__section_content">
        {call .list_ data="all" /}
    </div>
{/template}


/**
 * Items list
 * @param params {{
 *     data: {
 *         items: Array<(
 *             sm.bSmItem.Template.Params.Data|
 *             sm.bSmItem.TemplateEntity.Params.Data|
 *             sm.bSmItem.TemplateCompact.Params.Data|
 *             sm.bSmLink.Template.Params.Data|
 *             sm.lCourse.bDepartment.Template.Params.Data
 *         )>,
 *         itemType: string,
 *         countItemsPerPage: ?number,
 *         itemConfig: (
 *             sm.bSmItem.Template.Params.Config|
 *             sm.bSmItem.TemplateEntity.Params.Config|
 *             sm.bSmItem.TemplateCompact.Params.Config|
 *             sm.bSmLink.Template.Params.Config|
 *             undefined
 *         )
 *     },
 *     config: {
 *         stylizationModifier: (string|undefined)
 *     }
 * }}
 */
{template .list_}
    {let $countItemsPerPage kind="html"}
        {if $params.data?.countItemsPerPage}
            {$params.data.countItemsPerPage}
        {else}
            {length($params.data.items)}
        {/if}
    {/let}

    <div class="{call .rootClass/}__list">
        {for $i in range(length($params.data.items))}
            {call .item}
                {param params: [
                    'data': [
                        'item': $params.data.items[$i],
                        'itemConfig': $params.data.itemConfig
                    ],
                    'config': [
                        'type': $params.data.itemType,
                        'isHidden': $i >= $countItemsPerPage ? true : false,
                        'stylizationModifier': $params.config.stylizationModifier
                    ]
                ]/}
            {/call}
        {/for}
    </div>
{/template}


/**
 * Items list
 * @param params {{
 *     data: {
 *         item: (
 *             sm.bSmItem.Template.Params.Data|
 *             sm.bSmItem.TemplateEntity.Params.Data|
 *             sm.bSmItem.TemplateCompact.Params.Data|
 *             sm.bSmLink.Template.Params.Data|
 *             sm.lCourse.bDepartment.Template.Params.Data
 *         ),
 *         itemConfig: (
 *             sm.bSmItem.Template.Params.Config|
 *             sm.bSmItem.TemplateEntity.Params.Config|
 *             sm.bSmItem.TemplateCompact.Params.Config|
 *             sm.bSmLink.Template.Params.Config|
 *             undefined
 *         )
 *     },
 *     config: {
 *         type: string,
 *         isHidden: ?boolean,
 *         stylizationModifier: (string|undefined)
 *     }
 * }}
 */
{template .item}
    {let $classes kind="html"}
        {call .rootClass/}__item-wrap

        {if $params.config?.isHidden}
            {sp}{cl.iUtils.Utils.CssClass.HIDDEN}
        {/if}
    {/let}

    {let $customClasses kind="html"}
        {call .rootClass/}__item
    {/let}

    {let $itemConfig: augmentMap(
        $params.data.itemConfig,
        ['customClasses': [$customClasses]]
    ) /}

    <div class="{$classes}">
        {call cl.iFactory.FactoryManager.INSTANCE.renderTemplate}
            {param params: [
                'factory': $params?.config?.stylizationModifier,
                'type': $params.config.type,
                'renderParams': [
                    'data': $params.data.item,
                    'config': $itemConfig
                ]
            ]/}
        {/call}
    </div>
{/template}



/**
 * Attributes
 * @param params {{
 *     data: {
 *         itemConfig: (
 *             sm.bSmItem.Template.Params.Config|
 *             sm.bSmItem.TemplateEntity.Params.Config|
 *             sm.bSmItem.TemplateCompact.Params.Config|
 *             sm.bSmLink.Template.Params.Config|
 *             undefined
 *         ),
 *         itemType: ?string,
 *         countItemsPerPage: ?number
 *     }
 * }}
 * @override
 */
{template .attributes kind="attributes"}
    {let $data: quoteKeysIfJs([
        'itemType': $params.data.itemType,
        'itemConfig': $params.data.itemConfig,
        'countItemsPerPage': $params.data?.countItemsPerPage ?:
            length($params.data.items)
    ])/}

    data-params="
    {call cl.iUtils.Utils.stringify}
        {param json: $data/}
    {/call}"
{/template}


/**
 * @param params {
 *     data: {
 *         countItemsPerPage: (number|undefined)
 *     },
 *     config: {
 *         showLine: (boolean|undefined)
 *     }
 * }
 * @override
 */
{template .additionalClasses}
    {if $params.data?.countItemsPerPage}
        {call .rootClass /}_count-items_{$params.data.countItemsPerPage}
    {/if}
    {if $params.config?.showLine}
        {call .rootClass /}_line_show
    {/if}
{/template}


/**
 * Root css class
 * @override
 */
{template .rootClass}
    b-sm-item-list
{/template}
