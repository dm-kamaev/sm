{namespace sm.bSmCheckbox.Template}


/**
 * @typedef {{
 *     name: (string|undefined),
 *     label: string,
 *     value: string,
 *     isChecked: (boolean|undefined)
 * }} sm.bSmCheckbox.Template.Params.Data
 */


/**
 * @typedef {{
 *     theme: (string|undefined),
 *     stylizationModifier: string,
 *     customIcon: ({
 *         check: string,
 *         uncheck: string
 *     }|undefined)
 * }} sm.bSmCheckbox.Template.Params.Config
 */


/**
 * Constructor
 * @param params {{
 *     data: sm.bSmCheckbox.Template.Params.Data,
 *     config: sm.bSmCheckbox.Template.Params.Config
 * }}
 * @extends cl.iControl.Template
 * @factory sm.iCloblFactory.FactoryStendhal
 * @constructor
 */
{template .checkbox}
    {call .init data="all"/}
{/template}

/**
 * @override
 */
{template .NAME}
    smCheckbox
{/template}


/**
 * Body
 * @param params {{
 *     data: sm.bSmCheckbox.Template.Params.Data,
 *     config: sm.bSmCheckbox.Template.Params.Config
 * }}
 * @override
 */
{template .body}
    <label>
        {call .input_ data="all"/}
        {call .label_ data="all"/}
    </label>
{/template}


/**
 * Input template
 * @param params {{
 *     data: {
 *         value: string,
 *         isChecked: (boolean|undefined)
 *     }
 * }}
 */
{template .input_}
    <div class="{call .rootClass/}__input-wrap">
        <input type="checkbox"
            class="{call .rootClass/}__input"
            name="{$params.data.name ?: ''}"
            value="{$params.data.value}"
            {$params.data?.isChecked ? 'checked' : ''}
        />
        {call .icon_ data="all" /}
    </div>
{/template}


/**
 * Css classes
 * @param params {{
 *     config: {
 *         customIcon: ({
 *             check: string,
 *             uncheck: string
 *         }|undefined)
 *     }
 * }}
 * @override
 */
{template .icon_}
    {if $params.config.customIcon}
        <div class="{call .rootClass /}__icon_check">
            {call .renderChild}
                {param params: [
                    'type': 'icon-svg',
                    'renderParams': [
                        'data': [
                            'type': $params.config.customIcon.check
                        ]
                    ]
                ]/}
            {/call}
        </div>

        <div class="{call .rootClass /}__icon_uncheck">
            {call .renderChild}
                {param params: [
                    'type': 'icon-svg',
                    'renderParams': [
                        'data': [
                            'type': $params.config.customIcon.uncheck
                        ]
                    ]
                ]/}
            {/call}
        </div>
    {/if}
{/template}


/**
 * Label template
 * @param params {{
 *     data: {
 *         label: string,
 *         value: string
 *     }
 * }}
 */
{template .label_}
    <span class="{call .rootClass/}__label">
        {$params.data.label}
    </span>
{/template}


/**
 * Attributes
 * @param params {{
 *     data {
 *         name: (string|undefined),
 *         label: string,
 *         value: string,
 *         isChecked: (boolean|undefined)
 *     }
 * }}
 * @override
 */
{template .attributes kind="attributes"}
    data-params="
        {call cl.iUtils.Utils.stringify}
            {param json: [
                'name': $params.data.name ?: '',
                'label': $params.data.label,
                'value': $params.data.value
            ]/}
        {/call}"
{/template}


/**
 * Root css class
 * @override
 */
{template .rootClass}
    b-sm-checkbox
{/template}


/**
 * Css classes
 * @param params {{
 *     data: {
 *         isChecked: (boolean|undefined)
 *     },
 *     config: {
 *         customIcon: ({
 *             check: string,
 *             uncheck: string
 *         }|undefined)
 *     }
 * }}
 * @override
 */
{template .additionalClasses}
    {if $params.data.isChecked}
        {call .rootClass/}_checked
    {/if}
    {if $params.config.customIcon}
        {sp}{call .rootClass/}_custom-icon
    {/if}
{/template}
