{namespace sm.bSmSubscribeBoard.Template}


/**
 * @typedef {{
 *      entityId: number,
 *      entityType: string,
 *      input: cl.gInput.Template.Params
 * }} sm.bSmSubscribeBoard.Template.Params.Data
 */


 /**
 * @typedef {{
 * }} sm.bSmSubscribeBoard.Template.Params.Config
 */


 /**
 * Constructor
 * @param params {{
 *     data:  sm.bSmSubscribeBoard.Template.Params.Data,
 *     config: sm.bSmSubscribeBoard.Template.Params.Config
 * }}
 * @extends cl.iControl.Template
 * @factory sm.iCloblFactory.FactoryStendhal
 * @constructor
 */
{template .board}
    {call .init data="all"/}
{/template}


/**
 * @override
 */
{template .NAME}
    smSubscribeBoard
{/template}


/**
 * Root css class
 * @override
 */
{template .rootClass}
    b-sm-subscribe-board
{/template}


/**
 * Body
 * @override
 */
{template .body}
    {call .header_ data="all" /}
    {call .inputBlock_ data="all" /}
    {call .description_ data="all" /}
{/template}


/**
 * Header
 */
{template .header_}
    {let $text kind="text"}
        Подписка на новости этого вуза:
    {/let}
    {let $textSizeXs kind="text"}
        Подписка на новости:
    {/let}

    <div class="{call .rootClass/}__header">
        {call .getText}
            {param message: $text /}
        {/call}
    </div>

    <div class="{call .rootClass/}__header_size_xs">
        {call .getText}
            {param message: $textSizeXs /}
        {/call}
    </div>
{/template}


/**
 * Input block
 */
{template .inputBlock_}
    <div class="{call .rootClass/}__input">
        {call .input_ /}
        {call .inputIcon_ /}
    </div>
{/template}


/**
 * Description
 */
{template .input_}
    {let $placeholder kind="text"}
        {call .getText}
            {param message: 'Введите свой email' /}
        {/call}
    {/let}

    {let $customClasses kind="html"}
        {call .rootClass/}__email-input
    {/let}

    {call .renderChild}
        {param params: [
            'type': 'input',
            'renderParams': [
                'data': [
                    'placeholder': $placeholder,
                    'maxLength': 50,
                    'name': 'email',
                    'type': 'text'
                ],
                'config': [
                    'theme': 'neptune',
                    'validations': ['email', 'notEmpty'],
                    'customClasses': [$customClasses]
                ]
            ]
        ]/}
    {/call}
{/template}


/**
 * Description
 */
{template .inputIcon_}
    <div class="{call .rootClass/}__input-icon">
        {call .renderChild}
            {param params: [
                'type': 'icon-svg',
                'renderParams': [
                    'data': [
                        'type': 'arrow-send'
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Description
 */
{template .description_}
    {let $text kind="text"}
        Напомним о днях открытых дверей, пришлём списки зачисления и проходные баллы вам на почту
    {/let}

    <div class="{call .rootClass/}__description">
        {call .getText}
            {param message: $text /}
        {/call}
    </div>
{/template}


/**
 * @param params {
 *     data: {
 *         entityId: number,
 *         entityType: string
 *     }
 * }}
 * @override
 */
{template .attributes kind="attributes"}
    data-params="{call cl.iUtils.Utils.stringify}
            {param json: quoteKeysIfJs([
                'entityId': $params.data.entityId,
                'entityType': $params.data.entityType
            ]) /}
        {/call}"
{/template}
