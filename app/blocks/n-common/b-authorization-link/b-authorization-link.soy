{namespace sm.bAuthorizationLink.Template}


/**
 * Authorization link parameters
 * @typedef {{
 *     user: ?{
 *         firstName: ?string,
 *         lastName: ?string,
 *         photoUrl: ?string
 *     }
 * }} sm.bAuthorizationLink.Template.Params.Data
 */


/**
 * @typedef {{
 *     entityType?: string
 * }} sm.bAuthorizationLink.Template.Params.Config
 */


/**
 * Constructor
 * @param params {{
 *     data: sm.bAuthorizationLink.Template.Params.Data,
 *     config: sm.bAuthorizationLink.Template.Params.Config
 * }}
 * @extends cl.iControl.Template
 * @factory sm.iCloblFactory.FactoryStendhal
 * @constructor
 */
{template .authorizationLink}
    {call .init data="all"/}
{/template}

/**
 * @override
 */
{template .NAME}
    authorization-link
{/template}


/**
 * Body
 * @param params {{
 *     data: sm.bAuthorizationLink.Template.Params.Data,
 *     config: sm.bAuthorizationLink.Template.Params.Config
 * }}
 * @override
 */
{template .body}
    {call .login_ data="all" /}
    {call .logout_ data="all" /}
{/template}


/**
 * Login
 * @param params {{
 *     data: sm.bAuthorizationLink.Template.Params.Data,
 *     config: {
 *         entityType?: string
 *     }
 * }}
 */
{template .login_}
    <div class="{call .rootClass /}__login">
        {let $linkText kind="html"}
            {call .getText}
                {param message: 'Войти'/}
            {/call}
        {/let}

        {call .user_ data="all" /}

        {call .link_ }
            {param params: [
                'data': [
                    'content': $linkText
                ],
                'config': [
                    'modifier': 'login'
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Logout
 * @param params {{
 *     data: sm.bAuthorizationLink.Template.Params.Data,
 *     config: {
 *         entityType?: string
 *     }
 * }}
 */
{template .logout_}
    <div class="{call .rootClass/}__logout">
        {let $linkText kind="html"}
            {call .getText}
                {param message: 'Выход'/}
            {/call}
        {/let}

        {call .user_ data="all"/}

        {call .link_ }
            {param params: [
                'data': [
                    'content': $linkText
                ],
                'config': [
                    'modifier': 'logout'
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * User template
 * @param params {{
 *     data: {
 *         user: ?{
 *             firstName: ?string,
 *             lastName: ?string,
 *             photoUrl: ?string
 *         }
 *     }
 * }}
 */
{template .user_}
    <div class="{call .rootClass /}__user">
        {if $params?.data?.user?.firstName or $params?.data?.user?.lastName}
            {call .userData_ data="all" /}
        {else}
            {call .userIcon_ /}
        {/if}
    </div>
{/template}


/**
 * User data
 * @param params {{
 *     data: {
 *         user: ?{
 *             firstName: ?string,
 *             lastName: ?string,
 *             photoUrl: ?string
 *         }
 *     }
 * }}
 */
{template .userData_}
    <img class="{call .rootClass/}__user-photo"{sp}
        src="{$params.data?.user?.photoUrl}" alt="avatar">

    <div class="{call .rootClass/}__user-name">
        {$params.data?.user?.firstName}
    </div>
{/template}


/**
 * Link
 * @param params {{
 *     data: sm.bSmLink.Template.Params.Data,
 *     config: {
 *         modifier: string,
 *         entityType?: string
 *     }
 * }}
 */
{template .link_}
    {let $customClasses kind="html"}
        {call .rootClass/}__link-{$params.config.modifier}
    {/let}

    {let $config: augmentMap(
        [
            'customClasses': [$customClasses],
            'size': 'xxl'
        ],
        $params.config
    ) /}

    <div class="{call .rootClass/}__link{sp}
                {call .rootClass/}__link_{$params.config.modifier}">
        {call .renderChild}
            {param params: [
                'type': 'smLink',
                'renderParams': [
                    'data': $params.data,
                    'config': $config
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * User icon
 */
{template .userIcon_ kind="html" private="true"}
    {let $customClasses kind="html"}
        {call .rootClass/}__icon
    {/let}

    <div class="{call .rootClass/}__user-icon">
        {call .renderChild}
            {param params: [
                'type': 'icon-svg',
                'renderParams': [
                    'data': [
                        'type': 'person-black'
                    ],
                    'config': [
                        'customClasses': [$customClasses]
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Css classes
 * @param? params {{
 *     data: {
 *         user: ?{
 *             firstName: ?string,
 *             lastName: ?string
 *         }
 *     }
 * }}
 * @override
 */
{template .additionalClasses}
    {if $params?.data?.user?.firstName or $params?.data?.user?.lastName}
        {call .rootClass/}_logged
    {/if}
{/template}


/**
 * Root css class
 * @override
 */
{template .rootClass}
    b-authorization-link
{/template}
