{namespace sm.bSmItem.TemplateEntity}


/**
 * @typedef {{
 *     id: (number|undefined),
 *     type: string,
 *     name: {
 *         light: (string|undefined),
 *         bold: (string|undefined)
 *     },
 *     cost: {
 *         value: (number|undefined),
 *         type: string
 *     },
 *     alias: ?string,
 *     score: (sm.bSmScore.TemplateBrief.Params|undefined),
 *     description: string,
 *     brand: (string|undefined),
 *     metro: (Array<{
 *         id: number,
 *         name: string
 *     }>|undefined),
 *     area: (Array<{
 *         id: number,
 *         name: string
 *     }>|undefined),
 *     online: ({
 *         value: number,
 *         type: ('only'|'available')
 *     }|undefined),
 *     isFavorite: ?boolean,
 *     countDepartment: ?number
 * }} sm.bSmItem.TemplateEntity.Params.Data
 */


 /**
 * Constructor
 * @param params {{
 *     data: sm.bSmItem.TemplateEntity.Params.Data,
 *     config: sm.bSmItem.Template.Params.Config
 * }}
 * @extends sm.bSmItem.Template
 * @constructor
 */
{template .item}
    {call .init data="all"/}
{/template}


/**
 * Template estimated parameters
 * @param params {{
 *     data: {
 *         type: string,
 *         cost: {
 *             value: (number|undefined),
 *             type: string
 *         },
 *         score: ?sm.bSmScore.Template.Params.Data
 *     }
 * }}
 * @override
 */
{template .estimates}
    <div class="{call .rootClass/}__estimates">
        {call .cost_}
            {param params: [
                'data': $params.data,
                'config': [
                    'size': 'l'
                ]
            ]/}
        {/call}

        {call .score data="all" /}
    </div>
{/template}


/**
 * Description
 * @param params {{
 *     data: {
 *         type: string,
 *         cost: {
 *             value: (number|undefined),
 *             type: string
 *         },
 *         description: (string|undefined),
 *         brand: (string|undefined)
 *     }
 * }}
 * @override
 */
{template .sectionDescription}
    {let $classes kind="html"}
        {call .rootClass/}__section{sp}
        {call .rootClass/}__section_description

        {if not $params.data?.description and $params.data.type != 'course'}
            {sp}i-utils__hidden
        {/if}
    {/let}

    <div class="{$classes}">
        {call .description_ data="all" /}

        {call .brand_ data="all" /}

        {call .cost_}
            {param params: [
                'data': $params.data,
                'config': [
                    'size': 's'
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Details
 * @param params {{
 *     data: {
 *         metro: (Array<{
 *             id: number,
 *             name: string
 *         }>|undefined),
 *         area: (Array<{
 *             id: number,
 *             name: string
 *         }>|undefined),
 *         online: ({
 *             value: number,
 *             type: ('only'|'available')
 *         }|undefined),
 *         isFavorite: ?boolean,
 *         countDepartment: ?number
 *     },
 *     config: {
 *         stylizationModifier: string
 *     }
 * }}
 * @override
 */
{template .sectionDetails}
    <div class="{call .rootClass/}__section{sp}
                {call .rootClass/}__section_details">
        {call .location data="all" /}
        {call .countDepartment_ data="all" /}
        {call .online_ data="all" /}
        {call .favoriteLink_ data="all" /}
    </div>
{/template}


/**
 * Cost
 * @param params {{
 *     data: {
 *         type: string,
 *         cost: {
 *             value: (number|undefined),
 *             type: string
 *         }
 *     },
 *     config: {
 *         size: string
 *     }
 * }}
 */
{template .cost_}
    {let $classes kind="html"}
        {call .rootClass/}__cost{sp}
        {call .rootClass/}__cost_size_{$params.config.size}
    {/let}

    {if $params.data.type == 'course'}
        <div class="{$classes}">
            {call .insertCost_ data="all" /}
        </div>
    {/if}
{/template}


/**
 * Insert cost of
 * @param params {{
 *     data: {
 *         cost: {
 *             value: (number|undefined),
 *             type: string
 *         }
 *     }
 * }}
 */
{template .insertCost_}
    {if $params.data.cost?.value == 0}
        бесплатно
    {elseif $params.data.cost?.value}
        от&nbsp;{$params.data.cost.value}&nbsp;руб.
        &nbsp;/&nbsp;{$params.data.cost.type}
    {else}
        цена&nbsp;по&nbsp;запросу
    {/if}
{/template}


/**
 * Score
 * @param params {{
 *     data: {
 *         score: sm.bSmScore.TemplateBrief.Params
 *     }
 * }}
 * @override
 */
{template .score}
    {let $classes kind="html"}
        {call .rootClass/}__score

        {if $params.data.type == 'course'}
            {sp}{cl.iUtils.Utils.CssClass.HIDDEN}
        {/if}
    {/let}

    <div class="{$classes}">
        {call .renderChild}
            {param params: [
                'type': 'smScoreBrief',
                'renderParams': [
                    'data': $params.data.score.data,
                    'config': [
                        'primaryMark': [
                            'display': 'inline',
                            'size': 'l',
                            'isNameVisible': false,
                            'zeroSign': 'nothing',
                            'showMark': true
                        ],
                        'hintSecondaryMark': [
                            'offset': 'right-s',
                            'topOffset': 'xl'
                        ],
                        'theme': 'bold',
                        'isActive': $params.data.score?.config.isActive
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Description
 * @param params {{
 *     data: {
 *         description: (string|undefined)
 *     }
 * }}
 */
{template .description_}
    {if $params.data?.description}
        <div class="{call .rootClass/}__description">
            {$params.data.description}
        </div>
    {/if}
{/template}


/**
 * Center names which provide training
 * @param params {{
 *     data: {
 *         brand: (string|undefined)
 *     }
 * }}
 */
{template .brand_}
    {if $params.data?.brand}
        <div class="{call .rootClass/}__brand">
            {$params.data.brand}
        </div>
    {/if}
{/template}


/**
 * Online access
 * @param params {{
 *     data: {
 *         online: ({
 *             value: number,
 *             type: ('only'|'available')
 *         }|undefined)
 *     }
 * }}
 */
{template .online_}
    {if $params.data?.online?.type}
        <div class="{call .rootClass/}__badge{sp}
                    {call .rootClass/}__badge_online">
            {call .insertOnline_ data="all" /}
        </div>
    {/if}
{/template}


/**
 * Insert online access
 * @param params {{
 *     data: {
 *         online: ({
 *             value: number,
 *             type: ('only'|'available')
 *         }|undefined)
 *     }
 * }}
 */
{template .insertOnline_}
    {let $text kind="html"}
        {if $params.data.online.type == 'only'}
            Онлайн-курсы
        {elseif $params.data.online.type == 'available'}
            Доступны онлайн-курсы
        {/if}
    {/let}

    {call .renderChild}
        {param params: [
            'type': 'smBadge',
            'renderParams': [
                'data': [
                    'items': [[
                        'name': $text,
                        'id': $params.data.online.value
                    ]],
                ],
                'config': [
                    'searchType': 'formTraining',
                    'iconName': 'online',
                    'iconType': 'svg'
                ]
            ]
        ]/}
    {/call}
{/template}


/**
 * Favorite Link
 * @param params {{
 *     data: {
 *         isFavorite: boolean
 *     },
 *     config: {
 *         stylizationModifier: string
 *     }
 * }}
 */
{template .favoriteLink_ kind="html" private="true"}
    <div class="{call .rootClass/}__badge {call .rootClass/}__badge_favorite
        {sp}{cl.iUtils.Utils.CssClass.HIDDEN}">
        {call .renderChild}
            {param params: [
                'type': 'favorite-link',
                'renderParams': [
                    'data': [
                        'isFavorite': $params.data?.isFavorite
                    ],
                    'config': [
                        'theme': 'light'
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Details
 * @param params {{
 *     data: {
 *         countDepartment: (number|undefined)
 *     }
 * }}
 */
{template .countDepartment_}
    {if $params.data?.countDepartment}
        {let $text kind="html"}
            {call .countDepartmentText_ data="all" /}
        {/let}

        <div class="{call .rootClass/}__badge{sp}
                    {call .rootClass/}__badge_department">
            {call .renderChild}
                {param params: [
                    'type': 'smBadge',
                    'renderParams': [
                        'data': [
                            'items': [
                                ['name': $text]
                            ],
                        ],
                        'config': [
                            'type': 'online'
                        ]
                    ]
                ]/}
            {/call}
        </div>
    {/if}
{/template}


/**
 * Text for badge count department
 * @param params {{
 *     data: {
 *         countDepartment: (number|undefined)
 *     }
 * }}
 */
{template .countDepartmentText_}
    {$params.data.countDepartment}{sp}

    {call cl.iUtils.Utils.declensionPrint}
        {param params: [
            'num': $params.data.countDepartment,
            'nom': 'филиал',
            'gen': 'филиала',
            'plu': 'филиалов'
        ]/}
    {/call}

    {sp}в Москве
{/template}


/**
 * Css classes
 * @param params {{
 *     data: {
 *         type: string
 *     },
 *     config: {
 *         enableCover: (boolean|undefined),
 *         stylizationModifier: string
 *     }
 * }}
 * @override
 */
{template .additionalClasses}
    {call .super_additionalClasses data="all"/}{sp}

    {call .rootClass/}_entity{sp}
    {call .rootClass/}_type_{$params.data.type}
{/template}
