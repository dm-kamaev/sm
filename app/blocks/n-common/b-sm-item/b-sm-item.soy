{namespace sm.bSmItem.Template}


/**
 * @typedef {{
 *     id: number,
 *     type: string,
 *     name: {
 *         light: string,
 *         bold: ?string
 *     },
 *     alias: ?string,
 *     score: ?number,
 *     description: (string|undefined),
 *     metro: ?Array<{
 *         id: number,
 *         name: string
 *     }>,
 *     area: ?Array<{
 *         id: number,
 *         name: string
 *     }>,
 *     category: string,
 *     url: ?string
 * }} sm.bSmItem.Template.Params.Data
 */


 /**
 * @typedef {{
 *     enableCover: boolean,
 *     stylizationModifier: string,
 *     customClasses: ?Array<string>,
 *     theme: ?string
 * }} sm.bSmItem.Template.Params.Config
 */


 /**
 * Constructor
 * @param params {{
 *     data: sm.bSmItem.Template.Params.Data,
 *     config: sm.bSmItem.Template.Params.Config
 * }}
 * @extends cl.iControl.Template
 * @constructor
 */
{template .item}
    {call .init data="all"/}
{/template}


/**
 * Body
 * @param params {{
 *     data: sm.bSmItem.Template.Params.Data,
 *     config: sm.bSmItem.Template.Params.Config
 * }}
 * @override
 */
{template .body}
    {call .sections data="all" /}
{/template}


/**
 * sections
 * @param params {{
 *     data: sm.bSmItem.Template.Params.Data,
 *     config: sm.bSmItem.Template.Params.Config
 * }}
 * @protected
 */
{template .sections}
    {if ($params.config.enableCover or
        $params.config.stylizationModifier == 'experimental')
        and ($params.config.theme != 'minimal')}
        {call .sectionGroupCover data="all" /}
    {/if}

    {call .sectionGroupInfo data="all" /}
{/template}


/**
 * Section group template
 * @param params {{
 *     content: string,
 *     classes: string
 * }}
 * @protected
 */
{template .sectionGroup}
    <div class="{call .rootClass/}__section-group
        {if $params.classes}
            {sp}{$params.classes}
        {/if}
    ">
        {$params.content}
    </div>
{/template}


/**
 * Cover section group
 * @param params {{
 *     data: {
 *         name: {
 *             light: string,
 *             bold: (string|undefined)
 *         },
 *         imageUrl: (string|undefined)
 *     }
 * }}
 * @protected
 */
{template .sectionGroupCover kind="html"}
    {let $content kind="html"}
        {call .sectionCover data="all" /}
    {/let}
    {let $classes kind="html"}
        {call .rootClass /}__section-group_cover
    {/let}

    {call .sectionGroup}
        {param params: [
            'content': $content,
            'classes': $classes
        ] /}
    {/call}
{/template}


/**
 * Iformation section group
 * @param params {{
 *     data: sm.bSmItem.Template.Params.Data
 *     config: sm.bSmItem.Template.Params.Config
 * }}
 * @protected
 */
{template .sectionGroupInfo kind="html"}
    {let $classes kind="html"}
        {call .rootClass/}__section-group_info
    {/let}

    {let $content kind="html"}
        {if $params.config.theme == 'minimal'}
            {call .sectionLink data="all" /}
        {else}
            {call .sectionHeader data="all" /}
            {call .sectionDescription data="all" /}
            {call .sectionDetails data="all" /}
        {/if}
    {/let}

    {call .sectionGroup}
        {param params: [
            'content': $content,
            'classes': $classes
        ] /}
    {/call}
{/template}

/**
 * @param params {{
 *     data: {
 *         name: {
 *             light: string,
 *             bold: (string|undefined)
 *         },
 *         imageUrl: (string|undefined)
 *     }
 * }}
 * @protected
 */
{template .sectionCover}
    {let $imageUrl kind="html"}
        {if $params.data.imageUrl}
            {$params.data.imageUrl}
        {else}
            /static/images/n-common/b-sm-item/b-sm-item_entity/images/placeholder.png
        {/if}
    {/let}

    {let $description kind="html"}
        {$params.data.name.light}
        {if $params.data.name.bold}
            {sp}{$params.data.name.bold}
        {/if}
    {/let}

    <div class="{call .rootClass/}__section{sp}
                {call .rootClass/}__section_cover">

        <img class="{call .rootClass/}__cover-image"
            src="{$imageUrl}"
            alt="{$description}"
        >
    </div>
{/template}


/**
 * Header
 * @param params {{
 *     data: {
 *         id: number,
 *         name: {
 *             light: string,
 *             bold: ?string
 *         },
 *         category: string,
 *         url: string
 *     }
 * }}
 * @protected
 */
{template .sectionLink}
    <div class="{call .rootClass/}__section{sp}
                {call .rootClass/}__section_link">
    {$params.data.name.light}
    </div>
{/template}



/**
 * Header
 * @param params {{
 *     data: {
 *         name: {
 *             light: string,
 *             bold: ?string
 *         },
 *         score: ?number
 *     }
 * }}
 * @protected
 */
{template .sectionHeader}
    <div class="{call .rootClass/}__section{sp}
                {call .rootClass/}__section_header">
        {call .name data="all" /}
        {call .estimates data="all" /}
    </div>
{/template}


/**
 * Description
 * @param params {{
 *     data: {
 *         description: (string|undefined)
 *     }
 * }}
 * @protected
 */
{template .sectionDescription}
    {let $classes kind="html"}
        {call .rootClass/}__section{sp}
        {call .rootClass/}__section_description

        {if not $params.data?.description}
            {sp}i-utils__hidden
        {/if}
    {/let}

    <div class="{$classes}">
        {$params.data?.description ?: ''}
    </div>
{/template}


/**
 * Details
 * @param params {{
 *     data: {
 *         metro: ?Array<{
 *             id: number,
 *             name: string
 *         }>,
 *         area: ?Array<{
 *             id: number,
 *             name: string
 *         }>
 *     }
 * }}
 * @protected
 */
{template .sectionDetails}
    <div class="{call .rootClass/}__section{sp}
                {call .rootClass/}__section_details">
        {call .location data="all" /}
    </div>
{/template}


/**
 * Item name
 * @param params {{
 *     data: {
 *         name: {
 *             light: string,
 *             bold: ?string
 *         }
 *     }
 * }}
 * @protected
 */
{template .name}
    <div class="{call .rootClass/}__name">
        {let $name kind="html"}
            {$params.data.name.light}

            {if $params.data.name?.bold}
                {$params.data.name.bold}
            {/if}
        {/let}

        {let $customClasses kind="html"}
            {call .rootClass/}__link-name
        {/let}

        {call sm.bLink.Template.base}
            {param params: [
                'data': [
                    'name': $name
                ],
                'config': [
                    'size': 'large',
                    'customClasses': $customClasses
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Template estimated parameters
 * @param params {{
 *     data: {
 *         score: ?number
 *     }
 * }}
 * @protected
 */
{template .estimates}
    <div class="{call .rootClass/}__estimates">
        {call .score data="all" /}
    </div>
{/template}


/**
 * Score
 * @param params {{
 *     data: {
 *         score: ?number
 *     }
 * }}
 * @protected
 */
{template .score}
    {let $classes kind="html"}
        {call .rootClass/}__score

        {if not $params.data.score}
            {sp}{cl.iUtils.Utils.CssClass.HIDDEN}
        {/if}
    {/let}

    <div class="{$classes}">
        {call .renderChild}
            {param params: [
                'type': 'smMark',
                'renderParams': [
                    'data': [
                        'value': $params.data.score
                    ],
                    'config': [
                        'size': 'm'
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Location
 * @param params {{
 *     data: {
 *         metro: ?Array<{
 *             id: number,
 *             name: string
 *         }>,
 *         area: ?Array<{
 *             id: number,
 *             name: string
 *         }>
 *     }
 * }}
 * @protected
 */
{template .location}
    {if $params.data?.metro and length($params.data?.metro)}
        {call .metro_ data="all" /}
    {elseif $params.data?.area and length($params.data?.area)}
        {call .area_ data="all" /}
    {/if}
{/template}


/**
 * Metro badge
 * @param params {{
 *     data: {
 *         metro: ?Array<{
 *             id: number,
 *             name: string
 *         }>
 *     }
 * }}
 */
{template .metro_}
    <div class="{call .rootClass/}__badge {call .rootClass/}__badge_metro">
        {call .renderChild}
            {param params: [
                'type': 'smBadge',
                'renderParams': [
                    'data': [
                        'items': $params.data.metro,
                    ],
                    'config': [
                        'type': 'metro',
                        'iconName': 'metro',
                        'iconType': 'svg',
                        'entityType': $params.data.type
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Area badge
 * @param params {{
 *     data: {
 *         area: ?Array<{
 *             id: number,
 *             name: string
 *         }>
 *     }
 * }}
 */
{template .area_}
    <div class="{call .rootClass/}__badge {call .rootClass/}__badge_area">
        {call .renderChild}
            {param params: [
                'type': 'smBadge',
                'renderParams': [
                    'data': [
                        'items': $params.data.area,
                    ],
                    'config': [
                        'type': 'area',
                        'iconName': 'location',
                        'entityType': $params.data.type
                    ]
                ]
            ]/}
        {/call}
    </div>
{/template}


/**
 * Root css class
 * @override
 */
{template .rootClass}
    b-sm-item
{/template}


/**
 * Attributes
 * Important to write kind="attributes" when overrides
 * @param params {{
 *     data: {
 *         id: number,
 *         type: string,
 *         name: {
 *             light: string,
 *             bold: ?string
 *         },
 *         category: string
 *         alias: ?string,
 *         url: ?string
 *     },
 *     config: sm.bSmItem.Template.Params.Config
 * }}
 * @override
 */
{template .attributes kind="attributes"}
    {let $url kind="html"}
        {if $params.data.url == 'minimal'}
            {$params.data.url}
        {else}
            {$params.data.alias}
        {/if}
    {/let}
    {sp}href="/{$url}"
    {sp}data-params="
        {call cl.iUtils.Utils.stringify}
            {param json: quoteKeysIfJs([
                'id': $params.data.id,
                'name': $params.data.name.light + ($params.data.name.bold ?: ''),
                'type': $params.data.type,
                'category': $params.data.category
            ]) /}
        {/call}"
{/template}


/**
 * Tag name
 * @override
 */
{template .tag}
    a
{/template}
